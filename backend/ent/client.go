// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/team07/app/ent/migrate"

	"github.com/team07/app/ent/ambulance"
	"github.com/team07/app/ent/carinspection"
	"github.com/team07/app/ent/carregister"
	"github.com/team07/app/ent/carrepairrecord"
	"github.com/team07/app/ent/deliver"
	"github.com/team07/app/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Ambulance is the client for interacting with the Ambulance builders.
	Ambulance *AmbulanceClient
	// CarInspection is the client for interacting with the CarInspection builders.
	CarInspection *CarInspectionClient
	// CarRepairrecord is the client for interacting with the CarRepairrecord builders.
	CarRepairrecord *CarRepairrecordClient
	// Carregister is the client for interacting with the Carregister builders.
	Carregister *CarregisterClient
	// Deliver is the client for interacting with the Deliver builders.
	Deliver *DeliverClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Ambulance = NewAmbulanceClient(c.config)
	c.CarInspection = NewCarInspectionClient(c.config)
	c.CarRepairrecord = NewCarRepairrecordClient(c.config)
	c.Carregister = NewCarregisterClient(c.config)
	c.Deliver = NewDeliverClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Ambulance:       NewAmbulanceClient(cfg),
		CarInspection:   NewCarInspectionClient(cfg),
		CarRepairrecord: NewCarRepairrecordClient(cfg),
		Carregister:     NewCarregisterClient(cfg),
		Deliver:         NewDeliverClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:          cfg,
		Ambulance:       NewAmbulanceClient(cfg),
		CarInspection:   NewCarInspectionClient(cfg),
		CarRepairrecord: NewCarRepairrecordClient(cfg),
		Carregister:     NewCarregisterClient(cfg),
		Deliver:         NewDeliverClient(cfg),
		User:            NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Ambulance.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Ambulance.Use(hooks...)
	c.CarInspection.Use(hooks...)
	c.CarRepairrecord.Use(hooks...)
	c.Carregister.Use(hooks...)
	c.Deliver.Use(hooks...)
	c.User.Use(hooks...)
}

// AmbulanceClient is a client for the Ambulance schema.
type AmbulanceClient struct {
	config
}

// NewAmbulanceClient returns a client for the Ambulance from the given config.
func NewAmbulanceClient(c config) *AmbulanceClient {
	return &AmbulanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ambulance.Hooks(f(g(h())))`.
func (c *AmbulanceClient) Use(hooks ...Hook) {
	c.hooks.Ambulance = append(c.hooks.Ambulance, hooks...)
}

// Create returns a create builder for Ambulance.
func (c *AmbulanceClient) Create() *AmbulanceCreate {
	mutation := newAmbulanceMutation(c.config, OpCreate)
	return &AmbulanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Ambulance.
func (c *AmbulanceClient) Update() *AmbulanceUpdate {
	mutation := newAmbulanceMutation(c.config, OpUpdate)
	return &AmbulanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AmbulanceClient) UpdateOne(a *Ambulance) *AmbulanceUpdateOne {
	mutation := newAmbulanceMutation(c.config, OpUpdateOne, withAmbulance(a))
	return &AmbulanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AmbulanceClient) UpdateOneID(id int) *AmbulanceUpdateOne {
	mutation := newAmbulanceMutation(c.config, OpUpdateOne, withAmbulanceID(id))
	return &AmbulanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ambulance.
func (c *AmbulanceClient) Delete() *AmbulanceDelete {
	mutation := newAmbulanceMutation(c.config, OpDelete)
	return &AmbulanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AmbulanceClient) DeleteOne(a *Ambulance) *AmbulanceDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AmbulanceClient) DeleteOneID(id int) *AmbulanceDeleteOne {
	builder := c.Delete().Where(ambulance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AmbulanceDeleteOne{builder}
}

// Create returns a query builder for Ambulance.
func (c *AmbulanceClient) Query() *AmbulanceQuery {
	return &AmbulanceQuery{config: c.config}
}

// Get returns a Ambulance entity by its id.
func (c *AmbulanceClient) Get(ctx context.Context, id int) (*Ambulance, error) {
	return c.Query().Where(ambulance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AmbulanceClient) GetX(ctx context.Context, id int) *Ambulance {
	a, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return a
}

// Hooks returns the client hooks.
func (c *AmbulanceClient) Hooks() []Hook {
	return c.hooks.Ambulance
}

// CarInspectionClient is a client for the CarInspection schema.
type CarInspectionClient struct {
	config
}

// NewCarInspectionClient returns a client for the CarInspection from the given config.
func NewCarInspectionClient(c config) *CarInspectionClient {
	return &CarInspectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carinspection.Hooks(f(g(h())))`.
func (c *CarInspectionClient) Use(hooks ...Hook) {
	c.hooks.CarInspection = append(c.hooks.CarInspection, hooks...)
}

// Create returns a create builder for CarInspection.
func (c *CarInspectionClient) Create() *CarInspectionCreate {
	mutation := newCarInspectionMutation(c.config, OpCreate)
	return &CarInspectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for CarInspection.
func (c *CarInspectionClient) Update() *CarInspectionUpdate {
	mutation := newCarInspectionMutation(c.config, OpUpdate)
	return &CarInspectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarInspectionClient) UpdateOne(ci *CarInspection) *CarInspectionUpdateOne {
	mutation := newCarInspectionMutation(c.config, OpUpdateOne, withCarInspection(ci))
	return &CarInspectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarInspectionClient) UpdateOneID(id int) *CarInspectionUpdateOne {
	mutation := newCarInspectionMutation(c.config, OpUpdateOne, withCarInspectionID(id))
	return &CarInspectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarInspection.
func (c *CarInspectionClient) Delete() *CarInspectionDelete {
	mutation := newCarInspectionMutation(c.config, OpDelete)
	return &CarInspectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CarInspectionClient) DeleteOne(ci *CarInspection) *CarInspectionDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CarInspectionClient) DeleteOneID(id int) *CarInspectionDeleteOne {
	builder := c.Delete().Where(carinspection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarInspectionDeleteOne{builder}
}

// Create returns a query builder for CarInspection.
func (c *CarInspectionClient) Query() *CarInspectionQuery {
	return &CarInspectionQuery{config: c.config}
}

// Get returns a CarInspection entity by its id.
func (c *CarInspectionClient) Get(ctx context.Context, id int) (*CarInspection, error) {
	return c.Query().Where(carinspection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarInspectionClient) GetX(ctx context.Context, id int) *CarInspection {
	ci, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ci
}

// Hooks returns the client hooks.
func (c *CarInspectionClient) Hooks() []Hook {
	return c.hooks.CarInspection
}

// CarRepairrecordClient is a client for the CarRepairrecord schema.
type CarRepairrecordClient struct {
	config
}

// NewCarRepairrecordClient returns a client for the CarRepairrecord from the given config.
func NewCarRepairrecordClient(c config) *CarRepairrecordClient {
	return &CarRepairrecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrepairrecord.Hooks(f(g(h())))`.
func (c *CarRepairrecordClient) Use(hooks ...Hook) {
	c.hooks.CarRepairrecord = append(c.hooks.CarRepairrecord, hooks...)
}

// Create returns a create builder for CarRepairrecord.
func (c *CarRepairrecordClient) Create() *CarRepairrecordCreate {
	mutation := newCarRepairrecordMutation(c.config, OpCreate)
	return &CarRepairrecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for CarRepairrecord.
func (c *CarRepairrecordClient) Update() *CarRepairrecordUpdate {
	mutation := newCarRepairrecordMutation(c.config, OpUpdate)
	return &CarRepairrecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarRepairrecordClient) UpdateOne(cr *CarRepairrecord) *CarRepairrecordUpdateOne {
	mutation := newCarRepairrecordMutation(c.config, OpUpdateOne, withCarRepairrecord(cr))
	return &CarRepairrecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarRepairrecordClient) UpdateOneID(id int) *CarRepairrecordUpdateOne {
	mutation := newCarRepairrecordMutation(c.config, OpUpdateOne, withCarRepairrecordID(id))
	return &CarRepairrecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarRepairrecord.
func (c *CarRepairrecordClient) Delete() *CarRepairrecordDelete {
	mutation := newCarRepairrecordMutation(c.config, OpDelete)
	return &CarRepairrecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CarRepairrecordClient) DeleteOne(cr *CarRepairrecord) *CarRepairrecordDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CarRepairrecordClient) DeleteOneID(id int) *CarRepairrecordDeleteOne {
	builder := c.Delete().Where(carrepairrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarRepairrecordDeleteOne{builder}
}

// Create returns a query builder for CarRepairrecord.
func (c *CarRepairrecordClient) Query() *CarRepairrecordQuery {
	return &CarRepairrecordQuery{config: c.config}
}

// Get returns a CarRepairrecord entity by its id.
func (c *CarRepairrecordClient) Get(ctx context.Context, id int) (*CarRepairrecord, error) {
	return c.Query().Where(carrepairrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarRepairrecordClient) GetX(ctx context.Context, id int) *CarRepairrecord {
	cr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cr
}

// Hooks returns the client hooks.
func (c *CarRepairrecordClient) Hooks() []Hook {
	return c.hooks.CarRepairrecord
}

// CarregisterClient is a client for the Carregister schema.
type CarregisterClient struct {
	config
}

// NewCarregisterClient returns a client for the Carregister from the given config.
func NewCarregisterClient(c config) *CarregisterClient {
	return &CarregisterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carregister.Hooks(f(g(h())))`.
func (c *CarregisterClient) Use(hooks ...Hook) {
	c.hooks.Carregister = append(c.hooks.Carregister, hooks...)
}

// Create returns a create builder for Carregister.
func (c *CarregisterClient) Create() *CarregisterCreate {
	mutation := newCarregisterMutation(c.config, OpCreate)
	return &CarregisterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Carregister.
func (c *CarregisterClient) Update() *CarregisterUpdate {
	mutation := newCarregisterMutation(c.config, OpUpdate)
	return &CarregisterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarregisterClient) UpdateOne(ca *Carregister) *CarregisterUpdateOne {
	mutation := newCarregisterMutation(c.config, OpUpdateOne, withCarregister(ca))
	return &CarregisterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarregisterClient) UpdateOneID(id int) *CarregisterUpdateOne {
	mutation := newCarregisterMutation(c.config, OpUpdateOne, withCarregisterID(id))
	return &CarregisterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Carregister.
func (c *CarregisterClient) Delete() *CarregisterDelete {
	mutation := newCarregisterMutation(c.config, OpDelete)
	return &CarregisterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CarregisterClient) DeleteOne(ca *Carregister) *CarregisterDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CarregisterClient) DeleteOneID(id int) *CarregisterDeleteOne {
	builder := c.Delete().Where(carregister.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarregisterDeleteOne{builder}
}

// Create returns a query builder for Carregister.
func (c *CarregisterClient) Query() *CarregisterQuery {
	return &CarregisterQuery{config: c.config}
}

// Get returns a Carregister entity by its id.
func (c *CarregisterClient) Get(ctx context.Context, id int) (*Carregister, error) {
	return c.Query().Where(carregister.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarregisterClient) GetX(ctx context.Context, id int) *Carregister {
	ca, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ca
}

// Hooks returns the client hooks.
func (c *CarregisterClient) Hooks() []Hook {
	return c.hooks.Carregister
}

// DeliverClient is a client for the Deliver schema.
type DeliverClient struct {
	config
}

// NewDeliverClient returns a client for the Deliver from the given config.
func NewDeliverClient(c config) *DeliverClient {
	return &DeliverClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deliver.Hooks(f(g(h())))`.
func (c *DeliverClient) Use(hooks ...Hook) {
	c.hooks.Deliver = append(c.hooks.Deliver, hooks...)
}

// Create returns a create builder for Deliver.
func (c *DeliverClient) Create() *DeliverCreate {
	mutation := newDeliverMutation(c.config, OpCreate)
	return &DeliverCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Deliver.
func (c *DeliverClient) Update() *DeliverUpdate {
	mutation := newDeliverMutation(c.config, OpUpdate)
	return &DeliverUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeliverClient) UpdateOne(d *Deliver) *DeliverUpdateOne {
	mutation := newDeliverMutation(c.config, OpUpdateOne, withDeliver(d))
	return &DeliverUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeliverClient) UpdateOneID(id int) *DeliverUpdateOne {
	mutation := newDeliverMutation(c.config, OpUpdateOne, withDeliverID(id))
	return &DeliverUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Deliver.
func (c *DeliverClient) Delete() *DeliverDelete {
	mutation := newDeliverMutation(c.config, OpDelete)
	return &DeliverDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DeliverClient) DeleteOne(d *Deliver) *DeliverDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DeliverClient) DeleteOneID(id int) *DeliverDeleteOne {
	builder := c.Delete().Where(deliver.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeliverDeleteOne{builder}
}

// Create returns a query builder for Deliver.
func (c *DeliverClient) Query() *DeliverQuery {
	return &DeliverQuery{config: c.config}
}

// Get returns a Deliver entity by its id.
func (c *DeliverClient) Get(ctx context.Context, id int) (*Deliver, error) {
	return c.Query().Where(deliver.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeliverClient) GetX(ctx context.Context, id int) *Deliver {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// Hooks returns the client hooks.
func (c *DeliverClient) Hooks() []Hook {
	return c.hooks.Deliver
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
