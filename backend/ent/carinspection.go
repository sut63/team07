// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team07/app/ent/ambulance"
	"github.com/team07/app/ent/carinspection"
	"github.com/team07/app/ent/inspectionresult"
	"github.com/team07/app/ent/user"
)

// CarInspection is the model entity for the CarInspection schema.
type CarInspection struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// WheelCenter holds the value of the "wheel_center" field.
	WheelCenter float64 `json:"wheel_center,omitempty"`
	// SoundLevel holds the value of the "sound_level" field.
	SoundLevel float64 `json:"sound_level,omitempty"`
	// Blacksmoke holds the value of the "blacksmoke" field.
	Blacksmoke float64 `json:"blacksmoke,omitempty"`
	// Datetime holds the value of the "datetime" field.
	Datetime time.Time `json:"datetime,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarInspectionQuery when eager-loading is set.
	Edges               CarInspectionEdges `json:"edges"`
	ambulance_id        *int
	inspectionresult_id *int
	user_id             *int
}

// CarInspectionEdges holds the relations/edges for other nodes in the graph.
type CarInspectionEdges struct {
	// User holds the value of the user edge.
	User *User
	// Ambulance holds the value of the ambulance edge.
	Ambulance *Ambulance
	// Inspectionresult holds the value of the inspectionresult edge.
	Inspectionresult *InspectionResult
	// Carrepairrecords holds the value of the carrepairrecords edge.
	Carrepairrecords []*CarRepairrecord
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarInspectionEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AmbulanceOrErr returns the Ambulance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarInspectionEdges) AmbulanceOrErr() (*Ambulance, error) {
	if e.loadedTypes[1] {
		if e.Ambulance == nil {
			// The edge ambulance was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: ambulance.Label}
		}
		return e.Ambulance, nil
	}
	return nil, &NotLoadedError{edge: "ambulance"}
}

// InspectionresultOrErr returns the Inspectionresult value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarInspectionEdges) InspectionresultOrErr() (*InspectionResult, error) {
	if e.loadedTypes[2] {
		if e.Inspectionresult == nil {
			// The edge inspectionresult was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: inspectionresult.Label}
		}
		return e.Inspectionresult, nil
	}
	return nil, &NotLoadedError{edge: "inspectionresult"}
}

// CarrepairrecordsOrErr returns the Carrepairrecords value or an error if the edge
// was not loaded in eager-loading.
func (e CarInspectionEdges) CarrepairrecordsOrErr() ([]*CarRepairrecord, error) {
	if e.loadedTypes[3] {
		return e.Carrepairrecords, nil
	}
	return nil, &NotLoadedError{edge: "carrepairrecords"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CarInspection) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullFloat64{}, // wheel_center
		&sql.NullFloat64{}, // sound_level
		&sql.NullFloat64{}, // blacksmoke
		&sql.NullTime{},    // datetime
		&sql.NullString{},  // note
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*CarInspection) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // ambulance_id
		&sql.NullInt64{}, // inspectionresult_id
		&sql.NullInt64{}, // user_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CarInspection fields.
func (ci *CarInspection) assignValues(values ...interface{}) error {
	if m, n := len(values), len(carinspection.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ci.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field wheel_center", values[0])
	} else if value.Valid {
		ci.WheelCenter = value.Float64
	}
	if value, ok := values[1].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field sound_level", values[1])
	} else if value.Valid {
		ci.SoundLevel = value.Float64
	}
	if value, ok := values[2].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field blacksmoke", values[2])
	} else if value.Valid {
		ci.Blacksmoke = value.Float64
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field datetime", values[3])
	} else if value.Valid {
		ci.Datetime = value.Time
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field note", values[4])
	} else if value.Valid {
		ci.Note = value.String
	}
	values = values[5:]
	if len(values) == len(carinspection.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field ambulance_id", value)
		} else if value.Valid {
			ci.ambulance_id = new(int)
			*ci.ambulance_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field inspectionresult_id", value)
		} else if value.Valid {
			ci.inspectionresult_id = new(int)
			*ci.inspectionresult_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_id", value)
		} else if value.Valid {
			ci.user_id = new(int)
			*ci.user_id = int(value.Int64)
		}
	}
	return nil
}

// QueryUser queries the user edge of the CarInspection.
func (ci *CarInspection) QueryUser() *UserQuery {
	return (&CarInspectionClient{config: ci.config}).QueryUser(ci)
}

// QueryAmbulance queries the ambulance edge of the CarInspection.
func (ci *CarInspection) QueryAmbulance() *AmbulanceQuery {
	return (&CarInspectionClient{config: ci.config}).QueryAmbulance(ci)
}

// QueryInspectionresult queries the inspectionresult edge of the CarInspection.
func (ci *CarInspection) QueryInspectionresult() *InspectionResultQuery {
	return (&CarInspectionClient{config: ci.config}).QueryInspectionresult(ci)
}

// QueryCarrepairrecords queries the carrepairrecords edge of the CarInspection.
func (ci *CarInspection) QueryCarrepairrecords() *CarRepairrecordQuery {
	return (&CarInspectionClient{config: ci.config}).QueryCarrepairrecords(ci)
}

// Update returns a builder for updating this CarInspection.
// Note that, you need to call CarInspection.Unwrap() before calling this method, if this CarInspection
// was returned from a transaction, and the transaction was committed or rolled back.
func (ci *CarInspection) Update() *CarInspectionUpdateOne {
	return (&CarInspectionClient{config: ci.config}).UpdateOne(ci)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ci *CarInspection) Unwrap() *CarInspection {
	tx, ok := ci.config.driver.(*txDriver)
	if !ok {
		panic("ent: CarInspection is not a transactional entity")
	}
	ci.config.driver = tx.drv
	return ci
}

// String implements the fmt.Stringer.
func (ci *CarInspection) String() string {
	var builder strings.Builder
	builder.WriteString("CarInspection(")
	builder.WriteString(fmt.Sprintf("id=%v", ci.ID))
	builder.WriteString(", wheel_center=")
	builder.WriteString(fmt.Sprintf("%v", ci.WheelCenter))
	builder.WriteString(", sound_level=")
	builder.WriteString(fmt.Sprintf("%v", ci.SoundLevel))
	builder.WriteString(", blacksmoke=")
	builder.WriteString(fmt.Sprintf("%v", ci.Blacksmoke))
	builder.WriteString(", datetime=")
	builder.WriteString(ci.Datetime.Format(time.ANSIC))
	builder.WriteString(", note=")
	builder.WriteString(ci.Note)
	builder.WriteByte(')')
	return builder.String()
}

// CarInspections is a parsable slice of CarInspection.
type CarInspections []*CarInspection

func (ci CarInspections) config(cfg config) {
	for _i := range ci {
		ci[_i].config = cfg
	}
}
