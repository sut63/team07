// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team07/app/ent/receive"
)

// Receive is the model entity for the Receive schema.
type Receive struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Receivename holds the value of the "receivename" field.
	Receivename string `json:"receivename,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReceiveQuery when eager-loading is set.
	Edges ReceiveEdges `json:"edges"`
}

// ReceiveEdges holds the relations/edges for other nodes in the graph.
type ReceiveEdges struct {
	// Receiveid holds the value of the receiveid edge.
	Receiveid []*Transport
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ReceiveidOrErr returns the Receiveid value or an error if the edge
// was not loaded in eager-loading.
func (e ReceiveEdges) ReceiveidOrErr() ([]*Transport, error) {
	if e.loadedTypes[0] {
		return e.Receiveid, nil
	}
	return nil, &NotLoadedError{edge: "receiveid"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Receive) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // receivename
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Receive fields.
func (r *Receive) assignValues(values ...interface{}) error {
	if m, n := len(values), len(receive.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field receivename", values[0])
	} else if value.Valid {
		r.Receivename = value.String
	}
	return nil
}

// QueryReceiveid queries the receiveid edge of the Receive.
func (r *Receive) QueryReceiveid() *TransportQuery {
	return (&ReceiveClient{config: r.config}).QueryReceiveid(r)
}

// Update returns a builder for updating this Receive.
// Note that, you need to call Receive.Unwrap() before calling this method, if this Receive
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Receive) Update() *ReceiveUpdateOne {
	return (&ReceiveClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Receive) Unwrap() *Receive {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Receive is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Receive) String() string {
	var builder strings.Builder
	builder.WriteString("Receive(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", receivename=")
	builder.WriteString(r.Receivename)
	builder.WriteByte(')')
	return builder.String()
}

// Receives is a parsable slice of Receive.
type Receives []*Receive

func (r Receives) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
