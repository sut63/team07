// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team07/app/ent/ambulance"
	"github.com/team07/app/ent/carinspection"
	"github.com/team07/app/ent/carrepairrecord"
	"github.com/team07/app/ent/inspectionresult"
	"github.com/team07/app/ent/predicate"
	"github.com/team07/app/ent/user"
)

// CarInspectionUpdate is the builder for updating CarInspection entities.
type CarInspectionUpdate struct {
	config
	hooks      []Hook
	mutation   *CarInspectionMutation
	predicates []predicate.CarInspection
}

// Where adds a new predicate for the builder.
func (ciu *CarInspectionUpdate) Where(ps ...predicate.CarInspection) *CarInspectionUpdate {
	ciu.predicates = append(ciu.predicates, ps...)
	return ciu
}

// SetWheelCenter sets the wheel_center field.
func (ciu *CarInspectionUpdate) SetWheelCenter(f float64) *CarInspectionUpdate {
	ciu.mutation.ResetWheelCenter()
	ciu.mutation.SetWheelCenter(f)
	return ciu
}

// AddWheelCenter adds f to wheel_center.
func (ciu *CarInspectionUpdate) AddWheelCenter(f float64) *CarInspectionUpdate {
	ciu.mutation.AddWheelCenter(f)
	return ciu
}

// SetSoundLevel sets the sound_level field.
func (ciu *CarInspectionUpdate) SetSoundLevel(f float64) *CarInspectionUpdate {
	ciu.mutation.ResetSoundLevel()
	ciu.mutation.SetSoundLevel(f)
	return ciu
}

// AddSoundLevel adds f to sound_level.
func (ciu *CarInspectionUpdate) AddSoundLevel(f float64) *CarInspectionUpdate {
	ciu.mutation.AddSoundLevel(f)
	return ciu
}

// SetBlacksmoke sets the blacksmoke field.
func (ciu *CarInspectionUpdate) SetBlacksmoke(f float64) *CarInspectionUpdate {
	ciu.mutation.ResetBlacksmoke()
	ciu.mutation.SetBlacksmoke(f)
	return ciu
}

// AddBlacksmoke adds f to blacksmoke.
func (ciu *CarInspectionUpdate) AddBlacksmoke(f float64) *CarInspectionUpdate {
	ciu.mutation.AddBlacksmoke(f)
	return ciu
}

// SetDatetime sets the datetime field.
func (ciu *CarInspectionUpdate) SetDatetime(t time.Time) *CarInspectionUpdate {
	ciu.mutation.SetDatetime(t)
	return ciu
}

// SetNote sets the note field.
func (ciu *CarInspectionUpdate) SetNote(s string) *CarInspectionUpdate {
	ciu.mutation.SetNote(s)
	return ciu
}

// SetUserID sets the user edge to User by id.
func (ciu *CarInspectionUpdate) SetUserID(id int) *CarInspectionUpdate {
	ciu.mutation.SetUserID(id)
	return ciu
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (ciu *CarInspectionUpdate) SetNillableUserID(id *int) *CarInspectionUpdate {
	if id != nil {
		ciu = ciu.SetUserID(*id)
	}
	return ciu
}

// SetUser sets the user edge to User.
func (ciu *CarInspectionUpdate) SetUser(u *User) *CarInspectionUpdate {
	return ciu.SetUserID(u.ID)
}

// SetAmbulanceID sets the ambulance edge to Ambulance by id.
func (ciu *CarInspectionUpdate) SetAmbulanceID(id int) *CarInspectionUpdate {
	ciu.mutation.SetAmbulanceID(id)
	return ciu
}

// SetNillableAmbulanceID sets the ambulance edge to Ambulance by id if the given value is not nil.
func (ciu *CarInspectionUpdate) SetNillableAmbulanceID(id *int) *CarInspectionUpdate {
	if id != nil {
		ciu = ciu.SetAmbulanceID(*id)
	}
	return ciu
}

// SetAmbulance sets the ambulance edge to Ambulance.
func (ciu *CarInspectionUpdate) SetAmbulance(a *Ambulance) *CarInspectionUpdate {
	return ciu.SetAmbulanceID(a.ID)
}

// SetInspectionresultID sets the inspectionresult edge to InspectionResult by id.
func (ciu *CarInspectionUpdate) SetInspectionresultID(id int) *CarInspectionUpdate {
	ciu.mutation.SetInspectionresultID(id)
	return ciu
}

// SetNillableInspectionresultID sets the inspectionresult edge to InspectionResult by id if the given value is not nil.
func (ciu *CarInspectionUpdate) SetNillableInspectionresultID(id *int) *CarInspectionUpdate {
	if id != nil {
		ciu = ciu.SetInspectionresultID(*id)
	}
	return ciu
}

// SetInspectionresult sets the inspectionresult edge to InspectionResult.
func (ciu *CarInspectionUpdate) SetInspectionresult(i *InspectionResult) *CarInspectionUpdate {
	return ciu.SetInspectionresultID(i.ID)
}

// AddCarrepairrecordIDs adds the carrepairrecords edge to CarRepairrecord by ids.
func (ciu *CarInspectionUpdate) AddCarrepairrecordIDs(ids ...int) *CarInspectionUpdate {
	ciu.mutation.AddCarrepairrecordIDs(ids...)
	return ciu
}

// AddCarrepairrecords adds the carrepairrecords edges to CarRepairrecord.
func (ciu *CarInspectionUpdate) AddCarrepairrecords(c ...*CarRepairrecord) *CarInspectionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciu.AddCarrepairrecordIDs(ids...)
}

// Mutation returns the CarInspectionMutation object of the builder.
func (ciu *CarInspectionUpdate) Mutation() *CarInspectionMutation {
	return ciu.mutation
}

// ClearUser clears the user edge to User.
func (ciu *CarInspectionUpdate) ClearUser() *CarInspectionUpdate {
	ciu.mutation.ClearUser()
	return ciu
}

// ClearAmbulance clears the ambulance edge to Ambulance.
func (ciu *CarInspectionUpdate) ClearAmbulance() *CarInspectionUpdate {
	ciu.mutation.ClearAmbulance()
	return ciu
}

// ClearInspectionresult clears the inspectionresult edge to InspectionResult.
func (ciu *CarInspectionUpdate) ClearInspectionresult() *CarInspectionUpdate {
	ciu.mutation.ClearInspectionresult()
	return ciu
}

// RemoveCarrepairrecordIDs removes the carrepairrecords edge to CarRepairrecord by ids.
func (ciu *CarInspectionUpdate) RemoveCarrepairrecordIDs(ids ...int) *CarInspectionUpdate {
	ciu.mutation.RemoveCarrepairrecordIDs(ids...)
	return ciu
}

// RemoveCarrepairrecords removes carrepairrecords edges to CarRepairrecord.
func (ciu *CarInspectionUpdate) RemoveCarrepairrecords(c ...*CarRepairrecord) *CarInspectionUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciu.RemoveCarrepairrecordIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ciu *CarInspectionUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ciu.mutation.WheelCenter(); ok {
		if err := carinspection.WheelCenterValidator(v); err != nil {
			return 0, &ValidationError{Name: "wheel_center", err: fmt.Errorf("ent: validator failed for field \"wheel_center\": %w", err)}
		}
	}
	if v, ok := ciu.mutation.SoundLevel(); ok {
		if err := carinspection.SoundLevelValidator(v); err != nil {
			return 0, &ValidationError{Name: "sound_level", err: fmt.Errorf("ent: validator failed for field \"sound_level\": %w", err)}
		}
	}
	if v, ok := ciu.mutation.Blacksmoke(); ok {
		if err := carinspection.BlacksmokeValidator(v); err != nil {
			return 0, &ValidationError{Name: "blacksmoke", err: fmt.Errorf("ent: validator failed for field \"blacksmoke\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ciu.hooks) == 0 {
		affected, err = ciu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CarInspectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ciu.mutation = mutation
			affected, err = ciu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ciu.hooks) - 1; i >= 0; i-- {
			mut = ciu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ciu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *CarInspectionUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *CarInspectionUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *CarInspectionUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ciu *CarInspectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   carinspection.Table,
			Columns: carinspection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: carinspection.FieldID,
			},
		},
	}
	if ps := ciu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ciu.mutation.WheelCenter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: carinspection.FieldWheelCenter,
		})
	}
	if value, ok := ciu.mutation.AddedWheelCenter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: carinspection.FieldWheelCenter,
		})
	}
	if value, ok := ciu.mutation.SoundLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: carinspection.FieldSoundLevel,
		})
	}
	if value, ok := ciu.mutation.AddedSoundLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: carinspection.FieldSoundLevel,
		})
	}
	if value, ok := ciu.mutation.Blacksmoke(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: carinspection.FieldBlacksmoke,
		})
	}
	if value, ok := ciu.mutation.AddedBlacksmoke(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: carinspection.FieldBlacksmoke,
		})
	}
	if value, ok := ciu.mutation.Datetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: carinspection.FieldDatetime,
		})
	}
	if value, ok := ciu.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: carinspection.FieldNote,
		})
	}
	if ciu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carinspection.UserTable,
			Columns: []string{carinspection.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carinspection.UserTable,
			Columns: []string{carinspection.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.AmbulanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carinspection.AmbulanceTable,
			Columns: []string{carinspection.AmbulanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ambulance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.AmbulanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carinspection.AmbulanceTable,
			Columns: []string{carinspection.AmbulanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ambulance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciu.mutation.InspectionresultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carinspection.InspectionresultTable,
			Columns: []string{carinspection.InspectionresultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inspectionresult.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.InspectionresultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carinspection.InspectionresultTable,
			Columns: []string{carinspection.InspectionresultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inspectionresult.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ciu.mutation.RemovedCarrepairrecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carinspection.CarrepairrecordsTable,
			Columns: []string{carinspection.CarrepairrecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: carrepairrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciu.mutation.CarrepairrecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carinspection.CarrepairrecordsTable,
			Columns: []string{carinspection.CarrepairrecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: carrepairrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carinspection.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CarInspectionUpdateOne is the builder for updating a single CarInspection entity.
type CarInspectionUpdateOne struct {
	config
	hooks    []Hook
	mutation *CarInspectionMutation
}

// SetWheelCenter sets the wheel_center field.
func (ciuo *CarInspectionUpdateOne) SetWheelCenter(f float64) *CarInspectionUpdateOne {
	ciuo.mutation.ResetWheelCenter()
	ciuo.mutation.SetWheelCenter(f)
	return ciuo
}

// AddWheelCenter adds f to wheel_center.
func (ciuo *CarInspectionUpdateOne) AddWheelCenter(f float64) *CarInspectionUpdateOne {
	ciuo.mutation.AddWheelCenter(f)
	return ciuo
}

// SetSoundLevel sets the sound_level field.
func (ciuo *CarInspectionUpdateOne) SetSoundLevel(f float64) *CarInspectionUpdateOne {
	ciuo.mutation.ResetSoundLevel()
	ciuo.mutation.SetSoundLevel(f)
	return ciuo
}

// AddSoundLevel adds f to sound_level.
func (ciuo *CarInspectionUpdateOne) AddSoundLevel(f float64) *CarInspectionUpdateOne {
	ciuo.mutation.AddSoundLevel(f)
	return ciuo
}

// SetBlacksmoke sets the blacksmoke field.
func (ciuo *CarInspectionUpdateOne) SetBlacksmoke(f float64) *CarInspectionUpdateOne {
	ciuo.mutation.ResetBlacksmoke()
	ciuo.mutation.SetBlacksmoke(f)
	return ciuo
}

// AddBlacksmoke adds f to blacksmoke.
func (ciuo *CarInspectionUpdateOne) AddBlacksmoke(f float64) *CarInspectionUpdateOne {
	ciuo.mutation.AddBlacksmoke(f)
	return ciuo
}

// SetDatetime sets the datetime field.
func (ciuo *CarInspectionUpdateOne) SetDatetime(t time.Time) *CarInspectionUpdateOne {
	ciuo.mutation.SetDatetime(t)
	return ciuo
}

// SetNote sets the note field.
func (ciuo *CarInspectionUpdateOne) SetNote(s string) *CarInspectionUpdateOne {
	ciuo.mutation.SetNote(s)
	return ciuo
}

// SetUserID sets the user edge to User by id.
func (ciuo *CarInspectionUpdateOne) SetUserID(id int) *CarInspectionUpdateOne {
	ciuo.mutation.SetUserID(id)
	return ciuo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (ciuo *CarInspectionUpdateOne) SetNillableUserID(id *int) *CarInspectionUpdateOne {
	if id != nil {
		ciuo = ciuo.SetUserID(*id)
	}
	return ciuo
}

// SetUser sets the user edge to User.
func (ciuo *CarInspectionUpdateOne) SetUser(u *User) *CarInspectionUpdateOne {
	return ciuo.SetUserID(u.ID)
}

// SetAmbulanceID sets the ambulance edge to Ambulance by id.
func (ciuo *CarInspectionUpdateOne) SetAmbulanceID(id int) *CarInspectionUpdateOne {
	ciuo.mutation.SetAmbulanceID(id)
	return ciuo
}

// SetNillableAmbulanceID sets the ambulance edge to Ambulance by id if the given value is not nil.
func (ciuo *CarInspectionUpdateOne) SetNillableAmbulanceID(id *int) *CarInspectionUpdateOne {
	if id != nil {
		ciuo = ciuo.SetAmbulanceID(*id)
	}
	return ciuo
}

// SetAmbulance sets the ambulance edge to Ambulance.
func (ciuo *CarInspectionUpdateOne) SetAmbulance(a *Ambulance) *CarInspectionUpdateOne {
	return ciuo.SetAmbulanceID(a.ID)
}

// SetInspectionresultID sets the inspectionresult edge to InspectionResult by id.
func (ciuo *CarInspectionUpdateOne) SetInspectionresultID(id int) *CarInspectionUpdateOne {
	ciuo.mutation.SetInspectionresultID(id)
	return ciuo
}

// SetNillableInspectionresultID sets the inspectionresult edge to InspectionResult by id if the given value is not nil.
func (ciuo *CarInspectionUpdateOne) SetNillableInspectionresultID(id *int) *CarInspectionUpdateOne {
	if id != nil {
		ciuo = ciuo.SetInspectionresultID(*id)
	}
	return ciuo
}

// SetInspectionresult sets the inspectionresult edge to InspectionResult.
func (ciuo *CarInspectionUpdateOne) SetInspectionresult(i *InspectionResult) *CarInspectionUpdateOne {
	return ciuo.SetInspectionresultID(i.ID)
}

// AddCarrepairrecordIDs adds the carrepairrecords edge to CarRepairrecord by ids.
func (ciuo *CarInspectionUpdateOne) AddCarrepairrecordIDs(ids ...int) *CarInspectionUpdateOne {
	ciuo.mutation.AddCarrepairrecordIDs(ids...)
	return ciuo
}

// AddCarrepairrecords adds the carrepairrecords edges to CarRepairrecord.
func (ciuo *CarInspectionUpdateOne) AddCarrepairrecords(c ...*CarRepairrecord) *CarInspectionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciuo.AddCarrepairrecordIDs(ids...)
}

// Mutation returns the CarInspectionMutation object of the builder.
func (ciuo *CarInspectionUpdateOne) Mutation() *CarInspectionMutation {
	return ciuo.mutation
}

// ClearUser clears the user edge to User.
func (ciuo *CarInspectionUpdateOne) ClearUser() *CarInspectionUpdateOne {
	ciuo.mutation.ClearUser()
	return ciuo
}

// ClearAmbulance clears the ambulance edge to Ambulance.
func (ciuo *CarInspectionUpdateOne) ClearAmbulance() *CarInspectionUpdateOne {
	ciuo.mutation.ClearAmbulance()
	return ciuo
}

// ClearInspectionresult clears the inspectionresult edge to InspectionResult.
func (ciuo *CarInspectionUpdateOne) ClearInspectionresult() *CarInspectionUpdateOne {
	ciuo.mutation.ClearInspectionresult()
	return ciuo
}

// RemoveCarrepairrecordIDs removes the carrepairrecords edge to CarRepairrecord by ids.
func (ciuo *CarInspectionUpdateOne) RemoveCarrepairrecordIDs(ids ...int) *CarInspectionUpdateOne {
	ciuo.mutation.RemoveCarrepairrecordIDs(ids...)
	return ciuo
}

// RemoveCarrepairrecords removes carrepairrecords edges to CarRepairrecord.
func (ciuo *CarInspectionUpdateOne) RemoveCarrepairrecords(c ...*CarRepairrecord) *CarInspectionUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ciuo.RemoveCarrepairrecordIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (ciuo *CarInspectionUpdateOne) Save(ctx context.Context) (*CarInspection, error) {
	if v, ok := ciuo.mutation.WheelCenter(); ok {
		if err := carinspection.WheelCenterValidator(v); err != nil {
			return nil, &ValidationError{Name: "wheel_center", err: fmt.Errorf("ent: validator failed for field \"wheel_center\": %w", err)}
		}
	}
	if v, ok := ciuo.mutation.SoundLevel(); ok {
		if err := carinspection.SoundLevelValidator(v); err != nil {
			return nil, &ValidationError{Name: "sound_level", err: fmt.Errorf("ent: validator failed for field \"sound_level\": %w", err)}
		}
	}
	if v, ok := ciuo.mutation.Blacksmoke(); ok {
		if err := carinspection.BlacksmokeValidator(v); err != nil {
			return nil, &ValidationError{Name: "blacksmoke", err: fmt.Errorf("ent: validator failed for field \"blacksmoke\": %w", err)}
		}
	}

	var (
		err  error
		node *CarInspection
	)
	if len(ciuo.hooks) == 0 {
		node, err = ciuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CarInspectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ciuo.mutation = mutation
			node, err = ciuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ciuo.hooks) - 1; i >= 0; i-- {
			mut = ciuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ciuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *CarInspectionUpdateOne) SaveX(ctx context.Context) *CarInspection {
	ci, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ci
}

// Exec executes the query on the entity.
func (ciuo *CarInspectionUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *CarInspectionUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ciuo *CarInspectionUpdateOne) sqlSave(ctx context.Context) (ci *CarInspection, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   carinspection.Table,
			Columns: carinspection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: carinspection.FieldID,
			},
		},
	}
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CarInspection.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ciuo.mutation.WheelCenter(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: carinspection.FieldWheelCenter,
		})
	}
	if value, ok := ciuo.mutation.AddedWheelCenter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: carinspection.FieldWheelCenter,
		})
	}
	if value, ok := ciuo.mutation.SoundLevel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: carinspection.FieldSoundLevel,
		})
	}
	if value, ok := ciuo.mutation.AddedSoundLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: carinspection.FieldSoundLevel,
		})
	}
	if value, ok := ciuo.mutation.Blacksmoke(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: carinspection.FieldBlacksmoke,
		})
	}
	if value, ok := ciuo.mutation.AddedBlacksmoke(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: carinspection.FieldBlacksmoke,
		})
	}
	if value, ok := ciuo.mutation.Datetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: carinspection.FieldDatetime,
		})
	}
	if value, ok := ciuo.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: carinspection.FieldNote,
		})
	}
	if ciuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carinspection.UserTable,
			Columns: []string{carinspection.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carinspection.UserTable,
			Columns: []string{carinspection.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.AmbulanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carinspection.AmbulanceTable,
			Columns: []string{carinspection.AmbulanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ambulance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.AmbulanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carinspection.AmbulanceTable,
			Columns: []string{carinspection.AmbulanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ambulance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ciuo.mutation.InspectionresultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carinspection.InspectionresultTable,
			Columns: []string{carinspection.InspectionresultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inspectionresult.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.InspectionresultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carinspection.InspectionresultTable,
			Columns: []string{carinspection.InspectionresultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: inspectionresult.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := ciuo.mutation.RemovedCarrepairrecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carinspection.CarrepairrecordsTable,
			Columns: []string{carinspection.CarrepairrecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: carrepairrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ciuo.mutation.CarrepairrecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   carinspection.CarrepairrecordsTable,
			Columns: []string{carinspection.CarrepairrecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: carrepairrecord.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	ci = &CarInspection{config: ciuo.config}
	_spec.Assign = ci.assignValues
	_spec.ScanValues = ci.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carinspection.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ci, nil
}
