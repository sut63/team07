// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team07/app/ent/inspectionresult"
)

// InspectionResult is the model entity for the InspectionResult schema.
type InspectionResult struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResultName holds the value of the "result_name" field.
	ResultName string `json:"result_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InspectionResultQuery when eager-loading is set.
	Edges InspectionResultEdges `json:"edges"`
}

// InspectionResultEdges holds the relations/edges for other nodes in the graph.
type InspectionResultEdges struct {
	// Carinspections holds the value of the carinspections edge.
	Carinspections []*CarInspection
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CarinspectionsOrErr returns the Carinspections value or an error if the edge
// was not loaded in eager-loading.
func (e InspectionResultEdges) CarinspectionsOrErr() ([]*CarInspection, error) {
	if e.loadedTypes[0] {
		return e.Carinspections, nil
	}
	return nil, &NotLoadedError{edge: "carinspections"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InspectionResult) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // result_name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InspectionResult fields.
func (ir *InspectionResult) assignValues(values ...interface{}) error {
	if m, n := len(values), len(inspectionresult.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ir.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field result_name", values[0])
	} else if value.Valid {
		ir.ResultName = value.String
	}
	return nil
}

// QueryCarinspections queries the carinspections edge of the InspectionResult.
func (ir *InspectionResult) QueryCarinspections() *CarInspectionQuery {
	return (&InspectionResultClient{config: ir.config}).QueryCarinspections(ir)
}

// Update returns a builder for updating this InspectionResult.
// Note that, you need to call InspectionResult.Unwrap() before calling this method, if this InspectionResult
// was returned from a transaction, and the transaction was committed or rolled back.
func (ir *InspectionResult) Update() *InspectionResultUpdateOne {
	return (&InspectionResultClient{config: ir.config}).UpdateOne(ir)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ir *InspectionResult) Unwrap() *InspectionResult {
	tx, ok := ir.config.driver.(*txDriver)
	if !ok {
		panic("ent: InspectionResult is not a transactional entity")
	}
	ir.config.driver = tx.drv
	return ir
}

// String implements the fmt.Stringer.
func (ir *InspectionResult) String() string {
	var builder strings.Builder
	builder.WriteString("InspectionResult(")
	builder.WriteString(fmt.Sprintf("id=%v", ir.ID))
	builder.WriteString(", result_name=")
	builder.WriteString(ir.ResultName)
	builder.WriteByte(')')
	return builder.String()
}

// InspectionResults is a parsable slice of InspectionResult.
type InspectionResults []*InspectionResult

func (ir InspectionResults) config(cfg config) {
	for _i := range ir {
		ir[_i].config = cfg
	}
}
