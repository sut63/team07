// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team07/app/ent/send"
)

// Send is the model entity for the Send schema.
type Send struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Sendname holds the value of the "sendname" field.
	Sendname string `json:"sendname,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SendQuery when eager-loading is set.
	Edges SendEdges `json:"edges"`
}

// SendEdges holds the relations/edges for other nodes in the graph.
type SendEdges struct {
	// Sendid holds the value of the sendid edge.
	Sendid []*Transport
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SendidOrErr returns the Sendid value or an error if the edge
// was not loaded in eager-loading.
func (e SendEdges) SendidOrErr() ([]*Transport, error) {
	if e.loadedTypes[0] {
		return e.Sendid, nil
	}
	return nil, &NotLoadedError{edge: "sendid"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Send) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // sendname
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Send fields.
func (s *Send) assignValues(values ...interface{}) error {
	if m, n := len(values), len(send.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field sendname", values[0])
	} else if value.Valid {
		s.Sendname = value.String
	}
	return nil
}

// QuerySendid queries the sendid edge of the Send.
func (s *Send) QuerySendid() *TransportQuery {
	return (&SendClient{config: s.config}).QuerySendid(s)
}

// Update returns a builder for updating this Send.
// Note that, you need to call Send.Unwrap() before calling this method, if this Send
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Send) Update() *SendUpdateOne {
	return (&SendClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Send) Unwrap() *Send {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Send is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Send) String() string {
	var builder strings.Builder
	builder.WriteString("Send(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", sendname=")
	builder.WriteString(s.Sendname)
	builder.WriteByte(')')
	return builder.String()
}

// Sends is a parsable slice of Send.
type Sends []*Send

func (s Sends) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
