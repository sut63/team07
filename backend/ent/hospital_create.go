// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team07/app/ent/hospital"
	"github.com/team07/app/ent/transport"
)

// HospitalCreate is the builder for creating a Hospital entity.
type HospitalCreate struct {
	config
	mutation *HospitalMutation
	hooks    []Hook
}

// SetHospital sets the hospital field.
func (hc *HospitalCreate) SetHospital(s string) *HospitalCreate {
	hc.mutation.SetHospital(s)
	return hc
}

// AddReceiveIDs adds the receive edge to Transport by ids.
func (hc *HospitalCreate) AddReceiveIDs(ids ...int) *HospitalCreate {
	hc.mutation.AddReceiveIDs(ids...)
	return hc
}

// AddReceive adds the receive edges to Transport.
func (hc *HospitalCreate) AddReceive(t ...*Transport) *HospitalCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return hc.AddReceiveIDs(ids...)
}

// AddSendIDs adds the send edge to Transport by ids.
func (hc *HospitalCreate) AddSendIDs(ids ...int) *HospitalCreate {
	hc.mutation.AddSendIDs(ids...)
	return hc
}

// AddSend adds the send edges to Transport.
func (hc *HospitalCreate) AddSend(t ...*Transport) *HospitalCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return hc.AddSendIDs(ids...)
}

// Mutation returns the HospitalMutation object of the builder.
func (hc *HospitalCreate) Mutation() *HospitalMutation {
	return hc.mutation
}

// Save creates the Hospital in the database.
func (hc *HospitalCreate) Save(ctx context.Context) (*Hospital, error) {
	if _, ok := hc.mutation.Hospital(); !ok {
		return nil, &ValidationError{Name: "hospital", err: errors.New("ent: missing required field \"hospital\"")}
	}
	var (
		err  error
		node *Hospital
	)
	if len(hc.hooks) == 0 {
		node, err = hc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HospitalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hc.mutation = mutation
			node, err = hc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(hc.hooks) - 1; i >= 0; i-- {
			mut = hc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (hc *HospitalCreate) SaveX(ctx context.Context) *Hospital {
	v, err := hc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (hc *HospitalCreate) sqlSave(ctx context.Context) (*Hospital, error) {
	h, _spec := hc.createSpec()
	if err := sqlgraph.CreateNode(ctx, hc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	h.ID = int(id)
	return h, nil
}

func (hc *HospitalCreate) createSpec() (*Hospital, *sqlgraph.CreateSpec) {
	var (
		h     = &Hospital{config: hc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: hospital.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hospital.FieldID,
			},
		}
	)
	if value, ok := hc.mutation.Hospital(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hospital.FieldHospital,
		})
		h.Hospital = value
	}
	if nodes := hc.mutation.ReceiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hospital.ReceiveTable,
			Columns: []string{hospital.ReceiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := hc.mutation.SendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hospital.SendTable,
			Columns: []string{hospital.SendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return h, _spec
}
