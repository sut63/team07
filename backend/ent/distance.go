// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team07/app/ent/distance"
)

// Distance is the model entity for the Distance schema.
type Distance struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Distance holds the value of the "Distance" field.
	Distance string `json:"Distance,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DistanceQuery when eager-loading is set.
	Edges DistanceEdges `json:"edges"`
}

// DistanceEdges holds the relations/edges for other nodes in the graph.
type DistanceEdges struct {
	// Disid holds the value of the disid edge.
	Disid []*Carservice
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DisidOrErr returns the Disid value or an error if the edge
// was not loaded in eager-loading.
func (e DistanceEdges) DisidOrErr() ([]*Carservice, error) {
	if e.loadedTypes[0] {
		return e.Disid, nil
	}
	return nil, &NotLoadedError{edge: "disid"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Distance) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Distance
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Distance fields.
func (d *Distance) assignValues(values ...interface{}) error {
	if m, n := len(values), len(distance.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Distance", values[0])
	} else if value.Valid {
		d.Distance = value.String
	}
	return nil
}

// QueryDisid queries the disid edge of the Distance.
func (d *Distance) QueryDisid() *CarserviceQuery {
	return (&DistanceClient{config: d.config}).QueryDisid(d)
}

// Update returns a builder for updating this Distance.
// Note that, you need to call Distance.Unwrap() before calling this method, if this Distance
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Distance) Update() *DistanceUpdateOne {
	return (&DistanceClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Distance) Unwrap() *Distance {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Distance is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Distance) String() string {
	var builder strings.Builder
	builder.WriteString("Distance(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", Distance=")
	builder.WriteString(d.Distance)
	builder.WriteByte(')')
	return builder.String()
}

// Distances is a parsable slice of Distance.
type Distances []*Distance

func (d Distances) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
