/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersAmbulance,
    ControllersAmbulanceFromJSON,
    ControllersAmbulanceToJSON,
    ControllersCarCheckInOut,
    ControllersCarCheckInOutFromJSON,
    ControllersCarCheckInOutToJSON,
    ControllersCarInspection,
    ControllersCarInspectionFromJSON,
    ControllersCarInspectionToJSON,
    ControllersCarRepairrecord,
    ControllersCarRepairrecordFromJSON,
    ControllersCarRepairrecordToJSON,
    ControllersCarservice,
    ControllersCarserviceFromJSON,
    ControllersCarserviceToJSON,
    ControllersTransport,
    ControllersTransportFromJSON,
    ControllersTransportToJSON,
    EntAmbulance,
    EntAmbulanceFromJSON,
    EntAmbulanceToJSON,
    EntCarCheckInOut,
    EntCarCheckInOutFromJSON,
    EntCarCheckInOutToJSON,
    EntCarInspection,
    EntCarInspectionFromJSON,
    EntCarInspectionToJSON,
    EntCarRepairrecord,
    EntCarRepairrecordFromJSON,
    EntCarRepairrecordToJSON,
    EntCarbrand,
    EntCarbrandFromJSON,
    EntCarbrandToJSON,
    EntCarservice,
    EntCarserviceFromJSON,
    EntCarserviceToJSON,
    EntDistance,
    EntDistanceFromJSON,
    EntDistanceToJSON,
    EntHospital,
    EntHospitalFromJSON,
    EntHospitalToJSON,
    EntInspectionResult,
    EntInspectionResultFromJSON,
    EntInspectionResultToJSON,
    EntInsurance,
    EntInsuranceFromJSON,
    EntInsuranceToJSON,
    EntPurpose,
    EntPurposeFromJSON,
    EntPurposeToJSON,
    EntRepairing,
    EntRepairingFromJSON,
    EntRepairingToJSON,
    EntTransport,
    EntTransportFromJSON,
    EntTransportToJSON,
    EntUrgent,
    EntUrgentFromJSON,
    EntUrgentToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateAmbulanceRequest {
    ambulance: ControllersAmbulance;
}

export interface CreateCarcheckinoutRequest {
    carcheckinout: ControllersCarCheckInOut;
}

export interface CreateCarinspectionRequest {
    carinspection: ControllersCarInspection;
}

export interface CreateCarrepairrecordRequest {
    carrepairrecord: ControllersCarRepairrecord;
}

export interface CreateCarserviceRequest {
    carservice: ControllersCarservice;
}

export interface CreateTransportRequest {
    transport: ControllersTransport;
}

export interface DeleteAmbulanceRequest {
    id: number;
}

export interface DeleteCarbrandRequest {
    id: number;
}

export interface DeleteCarcheckinoutRequest {
    id: number;
}

export interface DeleteCarinspectionRequest {
    id: number;
}

export interface DeleteCarrepairrecordRequest {
    id: number;
}

export interface DeleteCarserviceRequest {
    id: number;
}

export interface DeleteHospitalRequest {
    id: number;
}

export interface DeleteInspectionresultRequest {
    id: number;
}

export interface DeleteInsuranceRequest {
    id: number;
}

export interface DeletePurposeRequest {
    id: number;
}

export interface DeleteTransportRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetAmbulanceRequest {
    id: number;
}

export interface GetCarbrandRequest {
    id: number;
}

export interface GetCarcheckinoutRequest {
    id: number;
}

export interface GetCarinspectionRequest {
    id: number;
}

export interface GetCarrepairrecordRequest {
    id: number;
}

export interface GetCarserviceRequest {
    id: number;
}

export interface GetDistanceRequest {
    id: number;
}

export interface GetHospitalRequest {
    id: number;
}

export interface GetInspectionresultRequest {
    id: number;
}

export interface GetInsuranceRequest {
    id: number;
}

export interface GetPurposeRequest {
    id: number;
}

export interface GetRepairingRequest {
    id: number;
}

export interface GetTransportRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListAmbulanceRequest {
    limit?: number;
    offset?: number;
}

export interface ListCarcheckinoutRequest {
    limit?: number;
    offset?: number;
}

export interface ListCarserviceRequest {
    limit?: number;
    offset?: number;
}

export interface ListDistanceRequest {
    limit?: number;
    offset?: number;
}

export interface ListRepairingRequest {
    limit?: number;
    offset?: number;
}

export interface ListUrgentRequest {
    limit?: number;
    offset?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create ambulance
     * Create ambulance
     */
    async createAmbulanceRaw(requestParameters: CreateAmbulanceRequest): Promise<runtime.ApiResponse<EntAmbulance>> {
        if (requestParameters.ambulance === null || requestParameters.ambulance === undefined) {
            throw new runtime.RequiredError('ambulance','Required parameter requestParameters.ambulance was null or undefined when calling createAmbulance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ambulances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersAmbulanceToJSON(requestParameters.ambulance),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAmbulanceFromJSON(jsonValue));
    }

    /**
     * Create ambulance
     * Create ambulance
     */
    async createAmbulance(requestParameters: CreateAmbulanceRequest): Promise<EntAmbulance> {
        const response = await this.createAmbulanceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create carcheckinout
     * Create carcheckinout
     */
    async createCarcheckinoutRaw(requestParameters: CreateCarcheckinoutRequest): Promise<runtime.ApiResponse<ControllersCarCheckInOut>> {
        if (requestParameters.carcheckinout === null || requestParameters.carcheckinout === undefined) {
            throw new runtime.RequiredError('carcheckinout','Required parameter requestParameters.carcheckinout was null or undefined when calling createCarcheckinout.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/carcheckinouts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersCarCheckInOutToJSON(requestParameters.carcheckinout),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersCarCheckInOutFromJSON(jsonValue));
    }

    /**
     * Create carcheckinout
     * Create carcheckinout
     */
    async createCarcheckinout(requestParameters: CreateCarcheckinoutRequest): Promise<ControllersCarCheckInOut> {
        const response = await this.createCarcheckinoutRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create carinspection
     * Create carinspection
     */
    async createCarinspectionRaw(requestParameters: CreateCarinspectionRequest): Promise<runtime.ApiResponse<EntCarInspection>> {
        if (requestParameters.carinspection === null || requestParameters.carinspection === undefined) {
            throw new runtime.RequiredError('carinspection','Required parameter requestParameters.carinspection was null or undefined when calling createCarinspection.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/carinspections`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersCarInspectionToJSON(requestParameters.carinspection),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCarInspectionFromJSON(jsonValue));
    }

    /**
     * Create carinspection
     * Create carinspection
     */
    async createCarinspection(requestParameters: CreateCarinspectionRequest): Promise<EntCarInspection> {
        const response = await this.createCarinspectionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create carrepairrecord
     * Create carrepairrecord
     */
    async createCarrepairrecordRaw(requestParameters: CreateCarrepairrecordRequest): Promise<runtime.ApiResponse<EntCarRepairrecord>> {
        if (requestParameters.carrepairrecord === null || requestParameters.carrepairrecord === undefined) {
            throw new runtime.RequiredError('carrepairrecord','Required parameter requestParameters.carrepairrecord was null or undefined when calling createCarrepairrecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/carrepairrecords`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersCarRepairrecordToJSON(requestParameters.carrepairrecord),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCarRepairrecordFromJSON(jsonValue));
    }

    /**
     * Create carrepairrecord
     * Create carrepairrecord
     */
    async createCarrepairrecord(requestParameters: CreateCarrepairrecordRequest): Promise<EntCarRepairrecord> {
        const response = await this.createCarrepairrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create carservice
     * Create carservice
     */
    async createCarserviceRaw(requestParameters: CreateCarserviceRequest): Promise<runtime.ApiResponse<EntCarservice>> {
        if (requestParameters.carservice === null || requestParameters.carservice === undefined) {
            throw new runtime.RequiredError('carservice','Required parameter requestParameters.carservice was null or undefined when calling createCarservice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/carservices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersCarserviceToJSON(requestParameters.carservice),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCarserviceFromJSON(jsonValue));
    }

    /**
     * Create carservice
     * Create carservice
     */
    async createCarservice(requestParameters: CreateCarserviceRequest): Promise<EntCarservice> {
        const response = await this.createCarserviceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create transport
     * Create transport
     */
    async createTransportRaw(requestParameters: CreateTransportRequest): Promise<runtime.ApiResponse<EntTransport>> {
        if (requestParameters.transport === null || requestParameters.transport === undefined) {
            throw new runtime.RequiredError('transport','Required parameter requestParameters.transport was null or undefined when calling createTransport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transports`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersTransportToJSON(requestParameters.transport),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTransportFromJSON(jsonValue));
    }

    /**
     * Create transport
     * Create transport
     */
    async createTransport(requestParameters: CreateTransportRequest): Promise<EntTransport> {
        const response = await this.createTransportRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Ambulance by ID
     * Delete a Ambulance entity by ID
     */
    async deleteAmbulanceRaw(requestParameters: DeleteAmbulanceRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAmbulance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ambulances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get Ambulance by ID
     * Delete a Ambulance entity by ID
     */
    async deleteAmbulance(requestParameters: DeleteAmbulanceRequest): Promise<object> {
        const response = await this.deleteAmbulanceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get carbrand by ID
     * Delete a carbrand entity by ID
     */
    async deleteCarbrandRaw(requestParameters: DeleteCarbrandRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCarbrand.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carbrands/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get carbrand by ID
     * Delete a carbrand entity by ID
     */
    async deleteCarbrand(requestParameters: DeleteCarbrandRequest): Promise<object> {
        const response = await this.deleteCarbrandRaw(requestParameters);
        return await response.value();
    }

    /**
     * get carcheckinout by ID
     * Delete a carcheckinout entity by ID
     */
    async deleteCarcheckinoutRaw(requestParameters: DeleteCarcheckinoutRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCarcheckinout.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carcheckinouts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get carcheckinout by ID
     * Delete a carcheckinout entity by ID
     */
    async deleteCarcheckinout(requestParameters: DeleteCarcheckinoutRequest): Promise<object> {
        const response = await this.deleteCarcheckinoutRaw(requestParameters);
        return await response.value();
    }

    /**
     * get carinspection by ID
     * Delete a carinspection entity by ID
     */
    async deleteCarinspectionRaw(requestParameters: DeleteCarinspectionRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCarinspection.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carinspections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get carinspection by ID
     * Delete a carinspection entity by ID
     */
    async deleteCarinspection(requestParameters: DeleteCarinspectionRequest): Promise<object> {
        const response = await this.deleteCarinspectionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get carrepairrecord by ID
     * Delete a carrepairrecord entity by ID
     */
    async deleteCarrepairrecordRaw(requestParameters: DeleteCarrepairrecordRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCarrepairrecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carrepairrecords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get carrepairrecord by ID
     * Delete a carrepairrecord entity by ID
     */
    async deleteCarrepairrecord(requestParameters: DeleteCarrepairrecordRequest): Promise<object> {
        const response = await this.deleteCarrepairrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Carservice by ID
     * Delete a Carservice entity by ID
     */
    async deleteCarserviceRaw(requestParameters: DeleteCarserviceRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCarservice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carservices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get Carservice by ID
     * Delete a Carservice entity by ID
     */
    async deleteCarservice(requestParameters: DeleteCarserviceRequest): Promise<object> {
        const response = await this.deleteCarserviceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get hospital by ID
     * Delete a hospital entity by ID
     */
    async deleteHospitalRaw(requestParameters: DeleteHospitalRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteHospital.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hospitals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get hospital by ID
     * Delete a hospital entity by ID
     */
    async deleteHospital(requestParameters: DeleteHospitalRequest): Promise<object> {
        const response = await this.deleteHospitalRaw(requestParameters);
        return await response.value();
    }

    /**
     * get inspectionresult by ID
     * Delete a inspectionresult entity by ID
     */
    async deleteInspectionresultRaw(requestParameters: DeleteInspectionresultRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteInspectionresult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inspectionresults/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get inspectionresult by ID
     * Delete a inspectionresult entity by ID
     */
    async deleteInspectionresult(requestParameters: DeleteInspectionresultRequest): Promise<object> {
        const response = await this.deleteInspectionresultRaw(requestParameters);
        return await response.value();
    }

    /**
     * get insurance by ID
     * Delete a insurance entity by ID
     */
    async deleteInsuranceRaw(requestParameters: DeleteInsuranceRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteInsurance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/insurances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get insurance by ID
     * Delete a insurance entity by ID
     */
    async deleteInsurance(requestParameters: DeleteInsuranceRequest): Promise<object> {
        const response = await this.deleteInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get purpose by ID
     * Delete a purpose entity by ID
     */
    async deletePurposeRaw(requestParameters: DeletePurposeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePurpose.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/purposes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get purpose by ID
     * Delete a purpose entity by ID
     */
    async deletePurpose(requestParameters: DeletePurposeRequest): Promise<object> {
        const response = await this.deletePurposeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get transport by ID
     * Delete a transport entity by ID
     */
    async deleteTransportRaw(requestParameters: DeleteTransportRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTransport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get transport by ID
     * Delete a transport entity by ID
     */
    async deleteTransport(requestParameters: DeleteTransportRequest): Promise<object> {
        const response = await this.deleteTransportRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get ambulance by ID
     * Get a ambulance entity by ID
     */
    async getAmbulanceRaw(requestParameters: GetAmbulanceRequest): Promise<runtime.ApiResponse<EntAmbulance>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAmbulance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ambulances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAmbulanceFromJSON(jsonValue));
    }

    /**
     * get ambulance by ID
     * Get a ambulance entity by ID
     */
    async getAmbulance(requestParameters: GetAmbulanceRequest): Promise<EntAmbulance> {
        const response = await this.getAmbulanceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get carbrand by ID
     * Get a carbrand entity by ID
     */
    async getCarbrandRaw(requestParameters: GetCarbrandRequest): Promise<runtime.ApiResponse<EntCarbrand>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCarbrand.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carbrands/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCarbrandFromJSON(jsonValue));
    }

    /**
     * get carbrand by ID
     * Get a carbrand entity by ID
     */
    async getCarbrand(requestParameters: GetCarbrandRequest): Promise<EntCarbrand> {
        const response = await this.getCarbrandRaw(requestParameters);
        return await response.value();
    }

    /**
     * get carcheckinout by ID
     * Get a carcheckinout entity by ID
     */
    async getCarcheckinoutRaw(requestParameters: GetCarcheckinoutRequest): Promise<runtime.ApiResponse<EntCarCheckInOut>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCarcheckinout.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carcheckinouts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCarCheckInOutFromJSON(jsonValue));
    }

    /**
     * get carcheckinout by ID
     * Get a carcheckinout entity by ID
     */
    async getCarcheckinout(requestParameters: GetCarcheckinoutRequest): Promise<EntCarCheckInOut> {
        const response = await this.getCarcheckinoutRaw(requestParameters);
        return await response.value();
    }

    /**
     * get carinspection by ID
     * Get a carinspection entity by ID
     */
    async getCarinspectionRaw(requestParameters: GetCarinspectionRequest): Promise<runtime.ApiResponse<EntCarInspection>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCarinspection.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carinspections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCarInspectionFromJSON(jsonValue));
    }

    /**
     * get carinspection by ID
     * Get a carinspection entity by ID
     */
    async getCarinspection(requestParameters: GetCarinspectionRequest): Promise<EntCarInspection> {
        const response = await this.getCarinspectionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get carrepairrecord by ID
     * Get a carrepairrecord entity by ID
     */
    async getCarrepairrecordRaw(requestParameters: GetCarrepairrecordRequest): Promise<runtime.ApiResponse<EntCarRepairrecord>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCarrepairrecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carrepairrecords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCarRepairrecordFromJSON(jsonValue));
    }

    /**
     * get carrepairrecord by ID
     * Get a carrepairrecord entity by ID
     */
    async getCarrepairrecord(requestParameters: GetCarrepairrecordRequest): Promise<EntCarRepairrecord> {
        const response = await this.getCarrepairrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * get carservice by ID
     * Get a carservice entity by ID
     */
    async getCarserviceRaw(requestParameters: GetCarserviceRequest): Promise<runtime.ApiResponse<EntCarservice>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCarservice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carservices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCarserviceFromJSON(jsonValue));
    }

    /**
     * get carservice by ID
     * Get a carservice entity by ID
     */
    async getCarservice(requestParameters: GetCarserviceRequest): Promise<EntCarservice> {
        const response = await this.getCarserviceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get distance by ID
     * Get a distance entity by ID
     */
    async getDistanceRaw(requestParameters: GetDistanceRequest): Promise<runtime.ApiResponse<EntDistance>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDistance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/distances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDistanceFromJSON(jsonValue));
    }

    /**
     * get distance by ID
     * Get a distance entity by ID
     */
    async getDistance(requestParameters: GetDistanceRequest): Promise<EntDistance> {
        const response = await this.getDistanceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get hospital by ID
     * Get a hospital entity by ID
     */
    async getHospitalRaw(requestParameters: GetHospitalRequest): Promise<runtime.ApiResponse<EntHospital>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getHospital.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hospitals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntHospitalFromJSON(jsonValue));
    }

    /**
     * get hospital by ID
     * Get a hospital entity by ID
     */
    async getHospital(requestParameters: GetHospitalRequest): Promise<EntHospital> {
        const response = await this.getHospitalRaw(requestParameters);
        return await response.value();
    }

    /**
     * get inspectionresult by ID
     * Get a inspectionresult entity by ID
     */
    async getInspectionresultRaw(requestParameters: GetInspectionresultRequest): Promise<runtime.ApiResponse<EntInspectionResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getInspectionresult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inspectionresults/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInspectionResultFromJSON(jsonValue));
    }

    /**
     * get inspectionresult by ID
     * Get a inspectionresult entity by ID
     */
    async getInspectionresult(requestParameters: GetInspectionresultRequest): Promise<EntInspectionResult> {
        const response = await this.getInspectionresultRaw(requestParameters);
        return await response.value();
    }

    /**
     * get insurance by ID
     * Get a insurance entity by ID
     */
    async getInsuranceRaw(requestParameters: GetInsuranceRequest): Promise<runtime.ApiResponse<EntInsurance>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getInsurance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/insurances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInsuranceFromJSON(jsonValue));
    }

    /**
     * get insurance by ID
     * Get a insurance entity by ID
     */
    async getInsurance(requestParameters: GetInsuranceRequest): Promise<EntInsurance> {
        const response = await this.getInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get purpose by ID
     * Get a purpose entity by ID
     */
    async getPurposeRaw(requestParameters: GetPurposeRequest): Promise<runtime.ApiResponse<EntPurpose>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPurpose.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/purposes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPurposeFromJSON(jsonValue));
    }

    /**
     * get purpose by ID
     * Get a purpose entity by ID
     */
    async getPurpose(requestParameters: GetPurposeRequest): Promise<EntPurpose> {
        const response = await this.getPurposeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get repairing by ID
     * Get a repairing entity by ID
     */
    async getRepairingRaw(requestParameters: GetRepairingRequest): Promise<runtime.ApiResponse<EntRepairing>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRepairing.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/repairings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRepairingFromJSON(jsonValue));
    }

    /**
     * get repairing by ID
     * Get a repairing entity by ID
     */
    async getRepairing(requestParameters: GetRepairingRequest): Promise<EntRepairing> {
        const response = await this.getRepairingRaw(requestParameters);
        return await response.value();
    }

    /**
     * get transport by ID
     * Get a transport entity by ID
     */
    async getTransportRaw(requestParameters: GetTransportRequest): Promise<runtime.ApiResponse<EntTransport>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTransport.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTransportFromJSON(jsonValue));
    }

    /**
     * get transport by ID
     * Get a transport entity by ID
     */
    async getTransport(requestParameters: GetTransportRequest): Promise<EntTransport> {
        const response = await this.getTransportRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list ambulance entities
     * List ambulance entities
     */
    async listAmbulanceRaw(requestParameters: ListAmbulanceRequest): Promise<runtime.ApiResponse<Array<EntAmbulance>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ambulances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntAmbulanceFromJSON));
    }

    /**
     * list ambulance entities
     * List ambulance entities
     */
    async listAmbulance(requestParameters: ListAmbulanceRequest): Promise<Array<EntAmbulance>> {
        const response = await this.listAmbulanceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list carbrand entities
     * List carbrand entities
     */
    async listCarbrandRaw(): Promise<runtime.ApiResponse<Array<EntCarbrand>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carbrands`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCarbrandFromJSON));
    }

    /**
     * list carbrand entities
     * List carbrand entities
     */
    async listCarbrand(): Promise<Array<EntCarbrand>> {
        const response = await this.listCarbrandRaw();
        return await response.value();
    }

    /**
     * list carcheckinout entities
     * List carcheckinout entities
     */
    async listCarcheckinoutRaw(requestParameters: ListCarcheckinoutRequest): Promise<runtime.ApiResponse<Array<EntCarCheckInOut>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carcheckinouts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCarCheckInOutFromJSON));
    }

    /**
     * list carcheckinout entities
     * List carcheckinout entities
     */
    async listCarcheckinout(requestParameters: ListCarcheckinoutRequest): Promise<Array<EntCarCheckInOut>> {
        const response = await this.listCarcheckinoutRaw(requestParameters);
        return await response.value();
    }

    /**
     * list carinspection entities
     * List carinspection entities
     */
    async listCarinspectionRaw(): Promise<runtime.ApiResponse<Array<EntCarInspection>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carinspections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCarInspectionFromJSON));
    }

    /**
     * list carinspection entities
     * List carinspection entities
     */
    async listCarinspection(): Promise<Array<EntCarInspection>> {
        const response = await this.listCarinspectionRaw();
        return await response.value();
    }

    /**
     * list carrepairrecord entities
     * List carrepairrecord entities
     */
    async listCarrepairrecordRaw(): Promise<runtime.ApiResponse<Array<EntCarRepairrecord>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carrepairrecords`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCarRepairrecordFromJSON));
    }

    /**
     * list carrepairrecord entities
     * List carrepairrecord entities
     */
    async listCarrepairrecord(): Promise<Array<EntCarRepairrecord>> {
        const response = await this.listCarrepairrecordRaw();
        return await response.value();
    }

    /**
     * list carservice entities
     * List carservice entities
     */
    async listCarserviceRaw(requestParameters: ListCarserviceRequest): Promise<runtime.ApiResponse<Array<EntCarservice>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/carservices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCarserviceFromJSON));
    }

    /**
     * list carservice entities
     * List carservice entities
     */
    async listCarservice(requestParameters: ListCarserviceRequest): Promise<Array<EntCarservice>> {
        const response = await this.listCarserviceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list distance entities
     * List distance entities
     */
    async listDistanceRaw(requestParameters: ListDistanceRequest): Promise<runtime.ApiResponse<Array<EntDistance>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/distances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDistanceFromJSON));
    }

    /**
     * list distance entities
     * List distance entities
     */
    async listDistance(requestParameters: ListDistanceRequest): Promise<Array<EntDistance>> {
        const response = await this.listDistanceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list hospital entities
     * List hospital entities
     */
    async listHospitalRaw(): Promise<runtime.ApiResponse<Array<EntHospital>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hospitals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntHospitalFromJSON));
    }

    /**
     * list hospital entities
     * List hospital entities
     */
    async listHospital(): Promise<Array<EntHospital>> {
        const response = await this.listHospitalRaw();
        return await response.value();
    }

    /**
     * list inspectionresult entities
     * List inspectionresult entities
     */
    async listInspectionresultRaw(): Promise<runtime.ApiResponse<Array<EntInspectionResult>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/inspectionresults`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntInspectionResultFromJSON));
    }

    /**
     * list inspectionresult entities
     * List inspectionresult entities
     */
    async listInspectionresult(): Promise<Array<EntInspectionResult>> {
        const response = await this.listInspectionresultRaw();
        return await response.value();
    }

    /**
     * list insurance entities
     * List insurance entities
     */
    async listInsuranceRaw(): Promise<runtime.ApiResponse<Array<EntInsurance>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/insurances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntInsuranceFromJSON));
    }

    /**
     * list insurance entities
     * List insurance entities
     */
    async listInsurance(): Promise<Array<EntInsurance>> {
        const response = await this.listInsuranceRaw();
        return await response.value();
    }

    /**
     * list purpose entities
     * List purpose entities
     */
    async listPurposeRaw(): Promise<runtime.ApiResponse<Array<EntPurpose>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/purposes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPurposeFromJSON));
    }

    /**
     * list purpose entities
     * List purpose entities
     */
    async listPurpose(): Promise<Array<EntPurpose>> {
        const response = await this.listPurposeRaw();
        return await response.value();
    }

    /**
     * list repairing entities
     * List Repairing entities
     */
    async listRepairingRaw(requestParameters: ListRepairingRequest): Promise<runtime.ApiResponse<Array<EntRepairing>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/repairings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRepairingFromJSON));
    }

    /**
     * list repairing entities
     * List Repairing entities
     */
    async listRepairing(requestParameters: ListRepairingRequest): Promise<Array<EntRepairing>> {
        const response = await this.listRepairingRaw(requestParameters);
        return await response.value();
    }

    /**
     * list transport entities
     * List transport entities
     */
    async listTransportRaw(): Promise<runtime.ApiResponse<Array<EntTransport>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transports`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntTransportFromJSON));
    }

    /**
     * list transport entities
     * List transport entities
     */
    async listTransport(): Promise<Array<EntTransport>> {
        const response = await this.listTransportRaw();
        return await response.value();
    }

    /**
     * list urgent entities
     * List urgent entities
     */
    async listUrgentRaw(requestParameters: ListUrgentRequest): Promise<runtime.ApiResponse<Array<EntUrgent>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/urgents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUrgentFromJSON));
    }

    /**
     * list urgent entities
     * List urgent entities
     */
    async listUrgent(requestParameters: ListUrgentRequest): Promise<Array<EntUrgent>> {
        const response = await this.listUrgentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(): Promise<Array<EntUser>> {
        const response = await this.listUserRaw();
        return await response.value();
    }

}
