// Code generated by entc, DO NOT EDIT.

package insurance

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team07/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Classofinsurance applies equality check predicate on the "classofinsurance" field. It's identical to ClassofinsuranceEQ.
func Classofinsurance(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassofinsurance), v))
	})
}

// Company applies equality check predicate on the "company" field. It's identical to CompanyEQ.
func Company(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompany), v))
	})
}

// ClassofinsuranceEQ applies the EQ predicate on the "classofinsurance" field.
func ClassofinsuranceEQ(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldClassofinsurance), v))
	})
}

// ClassofinsuranceNEQ applies the NEQ predicate on the "classofinsurance" field.
func ClassofinsuranceNEQ(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldClassofinsurance), v))
	})
}

// ClassofinsuranceIn applies the In predicate on the "classofinsurance" field.
func ClassofinsuranceIn(vs ...string) predicate.Insurance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Insurance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldClassofinsurance), v...))
	})
}

// ClassofinsuranceNotIn applies the NotIn predicate on the "classofinsurance" field.
func ClassofinsuranceNotIn(vs ...string) predicate.Insurance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Insurance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldClassofinsurance), v...))
	})
}

// ClassofinsuranceGT applies the GT predicate on the "classofinsurance" field.
func ClassofinsuranceGT(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldClassofinsurance), v))
	})
}

// ClassofinsuranceGTE applies the GTE predicate on the "classofinsurance" field.
func ClassofinsuranceGTE(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldClassofinsurance), v))
	})
}

// ClassofinsuranceLT applies the LT predicate on the "classofinsurance" field.
func ClassofinsuranceLT(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldClassofinsurance), v))
	})
}

// ClassofinsuranceLTE applies the LTE predicate on the "classofinsurance" field.
func ClassofinsuranceLTE(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldClassofinsurance), v))
	})
}

// ClassofinsuranceContains applies the Contains predicate on the "classofinsurance" field.
func ClassofinsuranceContains(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldClassofinsurance), v))
	})
}

// ClassofinsuranceHasPrefix applies the HasPrefix predicate on the "classofinsurance" field.
func ClassofinsuranceHasPrefix(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldClassofinsurance), v))
	})
}

// ClassofinsuranceHasSuffix applies the HasSuffix predicate on the "classofinsurance" field.
func ClassofinsuranceHasSuffix(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldClassofinsurance), v))
	})
}

// ClassofinsuranceEqualFold applies the EqualFold predicate on the "classofinsurance" field.
func ClassofinsuranceEqualFold(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldClassofinsurance), v))
	})
}

// ClassofinsuranceContainsFold applies the ContainsFold predicate on the "classofinsurance" field.
func ClassofinsuranceContainsFold(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldClassofinsurance), v))
	})
}

// CompanyEQ applies the EQ predicate on the "company" field.
func CompanyEQ(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCompany), v))
	})
}

// CompanyNEQ applies the NEQ predicate on the "company" field.
func CompanyNEQ(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCompany), v))
	})
}

// CompanyIn applies the In predicate on the "company" field.
func CompanyIn(vs ...string) predicate.Insurance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Insurance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCompany), v...))
	})
}

// CompanyNotIn applies the NotIn predicate on the "company" field.
func CompanyNotIn(vs ...string) predicate.Insurance {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Insurance(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCompany), v...))
	})
}

// CompanyGT applies the GT predicate on the "company" field.
func CompanyGT(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCompany), v))
	})
}

// CompanyGTE applies the GTE predicate on the "company" field.
func CompanyGTE(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCompany), v))
	})
}

// CompanyLT applies the LT predicate on the "company" field.
func CompanyLT(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCompany), v))
	})
}

// CompanyLTE applies the LTE predicate on the "company" field.
func CompanyLTE(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCompany), v))
	})
}

// CompanyContains applies the Contains predicate on the "company" field.
func CompanyContains(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCompany), v))
	})
}

// CompanyHasPrefix applies the HasPrefix predicate on the "company" field.
func CompanyHasPrefix(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCompany), v))
	})
}

// CompanyHasSuffix applies the HasSuffix predicate on the "company" field.
func CompanyHasSuffix(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCompany), v))
	})
}

// CompanyEqualFold applies the EqualFold predicate on the "company" field.
func CompanyEqualFold(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCompany), v))
	})
}

// CompanyContainsFold applies the ContainsFold predicate on the "company" field.
func CompanyContainsFold(v string) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCompany), v))
	})
}

// HasInsuranceof applies the HasEdge predicate on the "insuranceof" edge.
func HasInsuranceof() predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InsuranceofTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InsuranceofTable, InsuranceofColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInsuranceofWith applies the HasEdge predicate on the "insuranceof" edge with a given conditions (other predicates).
func HasInsuranceofWith(preds ...predicate.Ambulance) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InsuranceofInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InsuranceofTable, InsuranceofColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Insurance) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Insurance) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Insurance) predicate.Insurance {
	return predicate.Insurance(func(s *sql.Selector) {
		p(s.Not())
	})
}
