// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team07/app/ent/ambulance"
	"github.com/team07/app/ent/carinspection"
	"github.com/team07/app/ent/inspectionresult"
)

// InspectionResultCreate is the builder for creating a InspectionResult entity.
type InspectionResultCreate struct {
	config
	mutation *InspectionResultMutation
	hooks    []Hook
}

// SetResultName sets the result_name field.
func (irc *InspectionResultCreate) SetResultName(s string) *InspectionResultCreate {
	irc.mutation.SetResultName(s)
	return irc
}

// AddCarinspectionIDs adds the carinspections edge to CarInspection by ids.
func (irc *InspectionResultCreate) AddCarinspectionIDs(ids ...int) *InspectionResultCreate {
	irc.mutation.AddCarinspectionIDs(ids...)
	return irc
}

// AddCarinspections adds the carinspections edges to CarInspection.
func (irc *InspectionResultCreate) AddCarinspections(c ...*CarInspection) *InspectionResultCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return irc.AddCarinspectionIDs(ids...)
}

// AddStatusofIDs adds the statusof edge to Ambulance by ids.
func (irc *InspectionResultCreate) AddStatusofIDs(ids ...int) *InspectionResultCreate {
	irc.mutation.AddStatusofIDs(ids...)
	return irc
}

// AddStatusof adds the statusof edges to Ambulance.
func (irc *InspectionResultCreate) AddStatusof(a ...*Ambulance) *InspectionResultCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return irc.AddStatusofIDs(ids...)
}

// Mutation returns the InspectionResultMutation object of the builder.
func (irc *InspectionResultCreate) Mutation() *InspectionResultMutation {
	return irc.mutation
}

// Save creates the InspectionResult in the database.
func (irc *InspectionResultCreate) Save(ctx context.Context) (*InspectionResult, error) {
	if _, ok := irc.mutation.ResultName(); !ok {
		return nil, &ValidationError{Name: "result_name", err: errors.New("ent: missing required field \"result_name\"")}
	}
	if v, ok := irc.mutation.ResultName(); ok {
		if err := inspectionresult.ResultNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "result_name", err: fmt.Errorf("ent: validator failed for field \"result_name\": %w", err)}
		}
	}
	var (
		err  error
		node *InspectionResult
	)
	if len(irc.hooks) == 0 {
		node, err = irc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InspectionResultMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			irc.mutation = mutation
			node, err = irc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(irc.hooks) - 1; i >= 0; i-- {
			mut = irc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, irc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (irc *InspectionResultCreate) SaveX(ctx context.Context) *InspectionResult {
	v, err := irc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (irc *InspectionResultCreate) sqlSave(ctx context.Context) (*InspectionResult, error) {
	ir, _spec := irc.createSpec()
	if err := sqlgraph.CreateNode(ctx, irc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ir.ID = int(id)
	return ir, nil
}

func (irc *InspectionResultCreate) createSpec() (*InspectionResult, *sqlgraph.CreateSpec) {
	var (
		ir    = &InspectionResult{config: irc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: inspectionresult.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: inspectionresult.FieldID,
			},
		}
	)
	if value, ok := irc.mutation.ResultName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: inspectionresult.FieldResultName,
		})
		ir.ResultName = value
	}
	if nodes := irc.mutation.CarinspectionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inspectionresult.CarinspectionsTable,
			Columns: []string{inspectionresult.CarinspectionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: carinspection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := irc.mutation.StatusofIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   inspectionresult.StatusofTable,
			Columns: []string{inspectionresult.StatusofColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ambulance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return ir, _spec
}
