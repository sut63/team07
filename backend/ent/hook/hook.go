// Code generated by entc, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/team07/app/ent"
)

// The AmbulanceFunc type is an adapter to allow the use of ordinary
// function as Ambulance mutator.
type AmbulanceFunc func(context.Context, *ent.AmbulanceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f AmbulanceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.AmbulanceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.AmbulanceMutation", m)
	}
	return f(ctx, mv)
}

// The CarCheckInOutFunc type is an adapter to allow the use of ordinary
// function as CarCheckInOut mutator.
type CarCheckInOutFunc func(context.Context, *ent.CarCheckInOutMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarCheckInOutFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CarCheckInOutMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarCheckInOutMutation", m)
	}
	return f(ctx, mv)
}

// The CarInspectionFunc type is an adapter to allow the use of ordinary
// function as CarInspection mutator.
type CarInspectionFunc func(context.Context, *ent.CarInspectionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarInspectionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CarInspectionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarInspectionMutation", m)
	}
	return f(ctx, mv)
}

// The CarRepairrecordFunc type is an adapter to allow the use of ordinary
// function as CarRepairrecord mutator.
type CarRepairrecordFunc func(context.Context, *ent.CarRepairrecordMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarRepairrecordFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CarRepairrecordMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarRepairrecordMutation", m)
	}
	return f(ctx, mv)
}

// The CarbrandFunc type is an adapter to allow the use of ordinary
// function as Carbrand mutator.
type CarbrandFunc func(context.Context, *ent.CarbrandMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarbrandFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CarbrandMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarbrandMutation", m)
	}
	return f(ctx, mv)
}

// The CarregisterFunc type is an adapter to allow the use of ordinary
// function as Carregister mutator.
type CarregisterFunc func(context.Context, *ent.CarregisterMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarregisterFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CarregisterMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarregisterMutation", m)
	}
	return f(ctx, mv)
}

// The CarserviceFunc type is an adapter to allow the use of ordinary
// function as Carservice mutator.
type CarserviceFunc func(context.Context, *ent.CarserviceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f CarserviceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.CarserviceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.CarserviceMutation", m)
	}
	return f(ctx, mv)
}

// The DeliverFunc type is an adapter to allow the use of ordinary
// function as Deliver mutator.
type DeliverFunc func(context.Context, *ent.DeliverMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DeliverFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.DeliverMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DeliverMutation", m)
	}
	return f(ctx, mv)
}

// The DistanceFunc type is an adapter to allow the use of ordinary
// function as Distance mutator.
type DistanceFunc func(context.Context, *ent.DistanceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f DistanceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.DistanceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.DistanceMutation", m)
	}
	return f(ctx, mv)
}

// The InspectionResultFunc type is an adapter to allow the use of ordinary
// function as InspectionResult mutator.
type InspectionResultFunc func(context.Context, *ent.InspectionResultMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InspectionResultFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.InspectionResultMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InspectionResultMutation", m)
	}
	return f(ctx, mv)
}

// The InsuranceFunc type is an adapter to allow the use of ordinary
// function as Insurance mutator.
type InsuranceFunc func(context.Context, *ent.InsuranceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InsuranceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.InsuranceMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InsuranceMutation", m)
	}
	return f(ctx, mv)
}

// The JobPositionFunc type is an adapter to allow the use of ordinary
// function as JobPosition mutator.
type JobPositionFunc func(context.Context, *ent.JobPositionMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f JobPositionFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.JobPositionMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.JobPositionMutation", m)
	}
	return f(ctx, mv)
}

// The PurposeFunc type is an adapter to allow the use of ordinary
// function as Purpose mutator.
type PurposeFunc func(context.Context, *ent.PurposeMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f PurposeFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.PurposeMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.PurposeMutation", m)
	}
	return f(ctx, mv)
}

// The ReceiveFunc type is an adapter to allow the use of ordinary
// function as Receive mutator.
type ReceiveFunc func(context.Context, *ent.ReceiveMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ReceiveFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.ReceiveMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ReceiveMutation", m)
	}
	return f(ctx, mv)
}

// The RepairingFunc type is an adapter to allow the use of ordinary
// function as Repairing mutator.
type RepairingFunc func(context.Context, *ent.RepairingMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RepairingFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.RepairingMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RepairingMutation", m)
	}
	return f(ctx, mv)
}

// The SendFunc type is an adapter to allow the use of ordinary
// function as Send mutator.
type SendFunc func(context.Context, *ent.SendMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SendFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.SendMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SendMutation", m)
	}
	return f(ctx, mv)
}

// The TransportFunc type is an adapter to allow the use of ordinary
// function as Transport mutator.
type TransportFunc func(context.Context, *ent.TransportMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TransportFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.TransportMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TransportMutation", m)
	}
	return f(ctx, mv)
}

// The UrgentFunc type is an adapter to allow the use of ordinary
// function as Urgent mutator.
type UrgentFunc func(context.Context, *ent.UrgentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UrgentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UrgentMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UrgentMutation", m)
	}
	return f(ctx, mv)
}

// The UserFunc type is an adapter to allow the use of ordinary
// function as User mutator.
type UserFunc func(context.Context, *ent.UserMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f UserFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	mv, ok := m.(*ent.UserMutation)
	if !ok {
		return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.UserMutation", m)
	}
	return f(ctx, mv)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	Hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
//
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
//
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
//
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
//
func Reject(op ent.Op) ent.Hook {
	hk := func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(_ context.Context, m ent.Mutation) (ent.Value, error) {
			return nil, fmt.Errorf("%s operation is not allowed", m.Op())
		})
	}
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
