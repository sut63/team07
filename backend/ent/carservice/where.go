// Code generated by entc, DO NOT EDIT.

package carservice

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team07/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Customer applies equality check predicate on the "customer" field. It's identical to CustomerEQ.
func Customer(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomer), v))
	})
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocation), v))
	})
}

// Information applies equality check predicate on the "information" field. It's identical to InformationEQ.
func Information(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInformation), v))
	})
}

// Datetime applies equality check predicate on the "Datetime" field. It's identical to DatetimeEQ.
func Datetime(v time.Time) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDatetime), v))
	})
}

// CustomerEQ applies the EQ predicate on the "customer" field.
func CustomerEQ(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomer), v))
	})
}

// CustomerNEQ applies the NEQ predicate on the "customer" field.
func CustomerNEQ(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomer), v))
	})
}

// CustomerIn applies the In predicate on the "customer" field.
func CustomerIn(vs ...string) predicate.Carservice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Carservice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCustomer), v...))
	})
}

// CustomerNotIn applies the NotIn predicate on the "customer" field.
func CustomerNotIn(vs ...string) predicate.Carservice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Carservice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCustomer), v...))
	})
}

// CustomerGT applies the GT predicate on the "customer" field.
func CustomerGT(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustomer), v))
	})
}

// CustomerGTE applies the GTE predicate on the "customer" field.
func CustomerGTE(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustomer), v))
	})
}

// CustomerLT applies the LT predicate on the "customer" field.
func CustomerLT(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustomer), v))
	})
}

// CustomerLTE applies the LTE predicate on the "customer" field.
func CustomerLTE(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustomer), v))
	})
}

// CustomerContains applies the Contains predicate on the "customer" field.
func CustomerContains(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustomer), v))
	})
}

// CustomerHasPrefix applies the HasPrefix predicate on the "customer" field.
func CustomerHasPrefix(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustomer), v))
	})
}

// CustomerHasSuffix applies the HasSuffix predicate on the "customer" field.
func CustomerHasSuffix(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustomer), v))
	})
}

// CustomerEqualFold applies the EqualFold predicate on the "customer" field.
func CustomerEqualFold(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustomer), v))
	})
}

// CustomerContainsFold applies the ContainsFold predicate on the "customer" field.
func CustomerContainsFold(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustomer), v))
	})
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocation), v))
	})
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocation), v))
	})
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Carservice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Carservice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLocation), v...))
	})
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Carservice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Carservice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLocation), v...))
	})
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLocation), v))
	})
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLocation), v))
	})
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLocation), v))
	})
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLocation), v))
	})
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLocation), v))
	})
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLocation), v))
	})
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLocation), v))
	})
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLocation), v))
	})
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLocation), v))
	})
}

// InformationEQ applies the EQ predicate on the "information" field.
func InformationEQ(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInformation), v))
	})
}

// InformationNEQ applies the NEQ predicate on the "information" field.
func InformationNEQ(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInformation), v))
	})
}

// InformationIn applies the In predicate on the "information" field.
func InformationIn(vs ...string) predicate.Carservice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Carservice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldInformation), v...))
	})
}

// InformationNotIn applies the NotIn predicate on the "information" field.
func InformationNotIn(vs ...string) predicate.Carservice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Carservice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldInformation), v...))
	})
}

// InformationGT applies the GT predicate on the "information" field.
func InformationGT(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInformation), v))
	})
}

// InformationGTE applies the GTE predicate on the "information" field.
func InformationGTE(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInformation), v))
	})
}

// InformationLT applies the LT predicate on the "information" field.
func InformationLT(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInformation), v))
	})
}

// InformationLTE applies the LTE predicate on the "information" field.
func InformationLTE(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInformation), v))
	})
}

// InformationContains applies the Contains predicate on the "information" field.
func InformationContains(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInformation), v))
	})
}

// InformationHasPrefix applies the HasPrefix predicate on the "information" field.
func InformationHasPrefix(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInformation), v))
	})
}

// InformationHasSuffix applies the HasSuffix predicate on the "information" field.
func InformationHasSuffix(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInformation), v))
	})
}

// InformationEqualFold applies the EqualFold predicate on the "information" field.
func InformationEqualFold(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInformation), v))
	})
}

// InformationContainsFold applies the ContainsFold predicate on the "information" field.
func InformationContainsFold(v string) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInformation), v))
	})
}

// DatetimeEQ applies the EQ predicate on the "Datetime" field.
func DatetimeEQ(v time.Time) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDatetime), v))
	})
}

// DatetimeNEQ applies the NEQ predicate on the "Datetime" field.
func DatetimeNEQ(v time.Time) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDatetime), v))
	})
}

// DatetimeIn applies the In predicate on the "Datetime" field.
func DatetimeIn(vs ...time.Time) predicate.Carservice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Carservice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDatetime), v...))
	})
}

// DatetimeNotIn applies the NotIn predicate on the "Datetime" field.
func DatetimeNotIn(vs ...time.Time) predicate.Carservice {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Carservice(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDatetime), v...))
	})
}

// DatetimeGT applies the GT predicate on the "Datetime" field.
func DatetimeGT(v time.Time) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDatetime), v))
	})
}

// DatetimeGTE applies the GTE predicate on the "Datetime" field.
func DatetimeGTE(v time.Time) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDatetime), v))
	})
}

// DatetimeLT applies the LT predicate on the "Datetime" field.
func DatetimeLT(v time.Time) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDatetime), v))
	})
}

// DatetimeLTE applies the LTE predicate on the "Datetime" field.
func DatetimeLTE(v time.Time) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDatetime), v))
	})
}

// HasUserid applies the HasEdge predicate on the "userid" edge.
func HasUserid() predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseridTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UseridTable, UseridColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUseridWith applies the HasEdge predicate on the "userid" edge with a given conditions (other predicates).
func HasUseridWith(preds ...predicate.User) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UseridInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UseridTable, UseridColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDisid applies the HasEdge predicate on the "disid" edge.
func HasDisid() predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DisidTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DisidTable, DisidColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDisidWith applies the HasEdge predicate on the "disid" edge with a given conditions (other predicates).
func HasDisidWith(preds ...predicate.Distance) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DisidInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DisidTable, DisidColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUrgentid applies the HasEdge predicate on the "urgentid" edge.
func HasUrgentid() predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UrgentidTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UrgentidTable, UrgentidColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUrgentidWith applies the HasEdge predicate on the "urgentid" edge with a given conditions (other predicates).
func HasUrgentidWith(preds ...predicate.Urgent) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UrgentidInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UrgentidTable, UrgentidColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Carservice) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Carservice) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Carservice) predicate.Carservice {
	return predicate.Carservice(func(s *sql.Selector) {
		p(s.Not())
	})
}
