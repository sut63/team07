// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team07/app/ent/ambulance"
	"github.com/team07/app/ent/receive"
	"github.com/team07/app/ent/send"
	"github.com/team07/app/ent/transport"
	"github.com/team07/app/ent/user"
)

// Transport is the model entity for the Transport schema.
type Transport struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransportQuery when eager-loading is set.
	Edges     TransportEdges `json:"edges"`
	ambulance *int
	receiveid *int
	sendid    *int
	user      *int
}

// TransportEdges holds the relations/edges for other nodes in the graph.
type TransportEdges struct {
	// Sendid holds the value of the sendid edge.
	Sendid *Send
	// Receiveid holds the value of the receiveid edge.
	Receiveid *Receive
	// User holds the value of the user edge.
	User *User
	// Ambulance holds the value of the ambulance edge.
	Ambulance *Ambulance
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// SendidOrErr returns the Sendid value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransportEdges) SendidOrErr() (*Send, error) {
	if e.loadedTypes[0] {
		if e.Sendid == nil {
			// The edge sendid was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: send.Label}
		}
		return e.Sendid, nil
	}
	return nil, &NotLoadedError{edge: "sendid"}
}

// ReceiveidOrErr returns the Receiveid value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransportEdges) ReceiveidOrErr() (*Receive, error) {
	if e.loadedTypes[1] {
		if e.Receiveid == nil {
			// The edge receiveid was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: receive.Label}
		}
		return e.Receiveid, nil
	}
	return nil, &NotLoadedError{edge: "receiveid"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransportEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AmbulanceOrErr returns the Ambulance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransportEdges) AmbulanceOrErr() (*Ambulance, error) {
	if e.loadedTypes[3] {
		if e.Ambulance == nil {
			// The edge ambulance was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: ambulance.Label}
		}
		return e.Ambulance, nil
	}
	return nil, &NotLoadedError{edge: "ambulance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transport) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Transport) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // ambulance
		&sql.NullInt64{}, // receiveid
		&sql.NullInt64{}, // sendid
		&sql.NullInt64{}, // user
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transport fields.
func (t *Transport) assignValues(values ...interface{}) error {
	if m, n := len(values), len(transport.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	values = values[0:]
	if len(values) == len(transport.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field ambulance", value)
		} else if value.Valid {
			t.ambulance = new(int)
			*t.ambulance = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field receiveid", value)
		} else if value.Valid {
			t.receiveid = new(int)
			*t.receiveid = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field sendid", value)
		} else if value.Valid {
			t.sendid = new(int)
			*t.sendid = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user", value)
		} else if value.Valid {
			t.user = new(int)
			*t.user = int(value.Int64)
		}
	}
	return nil
}

// QuerySendid queries the sendid edge of the Transport.
func (t *Transport) QuerySendid() *SendQuery {
	return (&TransportClient{config: t.config}).QuerySendid(t)
}

// QueryReceiveid queries the receiveid edge of the Transport.
func (t *Transport) QueryReceiveid() *ReceiveQuery {
	return (&TransportClient{config: t.config}).QueryReceiveid(t)
}

// QueryUser queries the user edge of the Transport.
func (t *Transport) QueryUser() *UserQuery {
	return (&TransportClient{config: t.config}).QueryUser(t)
}

// QueryAmbulance queries the ambulance edge of the Transport.
func (t *Transport) QueryAmbulance() *AmbulanceQuery {
	return (&TransportClient{config: t.config}).QueryAmbulance(t)
}

// Update returns a builder for updating this Transport.
// Note that, you need to call Transport.Unwrap() before calling this method, if this Transport
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transport) Update() *TransportUpdateOne {
	return (&TransportClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Transport) Unwrap() *Transport {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transport is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transport) String() string {
	var builder strings.Builder
	builder.WriteString("Transport(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Transports is a parsable slice of Transport.
type Transports []*Transport

func (t Transports) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
