// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team07/app/ent/ambulance"
	"github.com/team07/app/ent/carinspection"
	"github.com/team07/app/ent/inspectionresult"
	"github.com/team07/app/ent/predicate"
)

// InspectionResultQuery is the builder for querying InspectionResult entities.
type InspectionResultQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.InspectionResult
	// eager-loading edges.
	withCarinspections *CarInspectionQuery
	withStatusof       *AmbulanceQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (irq *InspectionResultQuery) Where(ps ...predicate.InspectionResult) *InspectionResultQuery {
	irq.predicates = append(irq.predicates, ps...)
	return irq
}

// Limit adds a limit step to the query.
func (irq *InspectionResultQuery) Limit(limit int) *InspectionResultQuery {
	irq.limit = &limit
	return irq
}

// Offset adds an offset step to the query.
func (irq *InspectionResultQuery) Offset(offset int) *InspectionResultQuery {
	irq.offset = &offset
	return irq
}

// Order adds an order step to the query.
func (irq *InspectionResultQuery) Order(o ...OrderFunc) *InspectionResultQuery {
	irq.order = append(irq.order, o...)
	return irq
}

// QueryCarinspections chains the current query on the carinspections edge.
func (irq *InspectionResultQuery) QueryCarinspections() *CarInspectionQuery {
	query := &CarInspectionQuery{config: irq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := irq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(inspectionresult.Table, inspectionresult.FieldID, irq.sqlQuery()),
			sqlgraph.To(carinspection.Table, carinspection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, inspectionresult.CarinspectionsTable, inspectionresult.CarinspectionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(irq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatusof chains the current query on the statusof edge.
func (irq *InspectionResultQuery) QueryStatusof() *AmbulanceQuery {
	query := &AmbulanceQuery{config: irq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := irq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(inspectionresult.Table, inspectionresult.FieldID, irq.sqlQuery()),
			sqlgraph.To(ambulance.Table, ambulance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, inspectionresult.StatusofTable, inspectionresult.StatusofColumn),
		)
		fromU = sqlgraph.SetNeighbors(irq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first InspectionResult entity in the query. Returns *NotFoundError when no inspectionresult was found.
func (irq *InspectionResultQuery) First(ctx context.Context) (*InspectionResult, error) {
	irs, err := irq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(irs) == 0 {
		return nil, &NotFoundError{inspectionresult.Label}
	}
	return irs[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (irq *InspectionResultQuery) FirstX(ctx context.Context) *InspectionResult {
	ir, err := irq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return ir
}

// FirstID returns the first InspectionResult id in the query. Returns *NotFoundError when no id was found.
func (irq *InspectionResultQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = irq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{inspectionresult.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (irq *InspectionResultQuery) FirstXID(ctx context.Context) int {
	id, err := irq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only InspectionResult entity in the query, returns an error if not exactly one entity was returned.
func (irq *InspectionResultQuery) Only(ctx context.Context) (*InspectionResult, error) {
	irs, err := irq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(irs) {
	case 1:
		return irs[0], nil
	case 0:
		return nil, &NotFoundError{inspectionresult.Label}
	default:
		return nil, &NotSingularError{inspectionresult.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (irq *InspectionResultQuery) OnlyX(ctx context.Context) *InspectionResult {
	ir, err := irq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return ir
}

// OnlyID returns the only InspectionResult id in the query, returns an error if not exactly one id was returned.
func (irq *InspectionResultQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = irq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{inspectionresult.Label}
	default:
		err = &NotSingularError{inspectionresult.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (irq *InspectionResultQuery) OnlyIDX(ctx context.Context) int {
	id, err := irq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of InspectionResults.
func (irq *InspectionResultQuery) All(ctx context.Context) ([]*InspectionResult, error) {
	if err := irq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return irq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (irq *InspectionResultQuery) AllX(ctx context.Context) []*InspectionResult {
	irs, err := irq.All(ctx)
	if err != nil {
		panic(err)
	}
	return irs
}

// IDs executes the query and returns a list of InspectionResult ids.
func (irq *InspectionResultQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := irq.Select(inspectionresult.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (irq *InspectionResultQuery) IDsX(ctx context.Context) []int {
	ids, err := irq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (irq *InspectionResultQuery) Count(ctx context.Context) (int, error) {
	if err := irq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return irq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (irq *InspectionResultQuery) CountX(ctx context.Context) int {
	count, err := irq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (irq *InspectionResultQuery) Exist(ctx context.Context) (bool, error) {
	if err := irq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return irq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (irq *InspectionResultQuery) ExistX(ctx context.Context) bool {
	exist, err := irq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (irq *InspectionResultQuery) Clone() *InspectionResultQuery {
	return &InspectionResultQuery{
		config:     irq.config,
		limit:      irq.limit,
		offset:     irq.offset,
		order:      append([]OrderFunc{}, irq.order...),
		unique:     append([]string{}, irq.unique...),
		predicates: append([]predicate.InspectionResult{}, irq.predicates...),
		// clone intermediate query.
		sql:  irq.sql.Clone(),
		path: irq.path,
	}
}

//  WithCarinspections tells the query-builder to eager-loads the nodes that are connected to
// the "carinspections" edge. The optional arguments used to configure the query builder of the edge.
func (irq *InspectionResultQuery) WithCarinspections(opts ...func(*CarInspectionQuery)) *InspectionResultQuery {
	query := &CarInspectionQuery{config: irq.config}
	for _, opt := range opts {
		opt(query)
	}
	irq.withCarinspections = query
	return irq
}

//  WithStatusof tells the query-builder to eager-loads the nodes that are connected to
// the "statusof" edge. The optional arguments used to configure the query builder of the edge.
func (irq *InspectionResultQuery) WithStatusof(opts ...func(*AmbulanceQuery)) *InspectionResultQuery {
	query := &AmbulanceQuery{config: irq.config}
	for _, opt := range opts {
		opt(query)
	}
	irq.withStatusof = query
	return irq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ResultName string `json:"result_name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.InspectionResult.Query().
//		GroupBy(inspectionresult.FieldResultName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (irq *InspectionResultQuery) GroupBy(field string, fields ...string) *InspectionResultGroupBy {
	group := &InspectionResultGroupBy{config: irq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := irq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return irq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		ResultName string `json:"result_name,omitempty"`
//	}
//
//	client.InspectionResult.Query().
//		Select(inspectionresult.FieldResultName).
//		Scan(ctx, &v)
//
func (irq *InspectionResultQuery) Select(field string, fields ...string) *InspectionResultSelect {
	selector := &InspectionResultSelect{config: irq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := irq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return irq.sqlQuery(), nil
	}
	return selector
}

func (irq *InspectionResultQuery) prepareQuery(ctx context.Context) error {
	if irq.path != nil {
		prev, err := irq.path(ctx)
		if err != nil {
			return err
		}
		irq.sql = prev
	}
	return nil
}

func (irq *InspectionResultQuery) sqlAll(ctx context.Context) ([]*InspectionResult, error) {
	var (
		nodes       = []*InspectionResult{}
		_spec       = irq.querySpec()
		loadedTypes = [2]bool{
			irq.withCarinspections != nil,
			irq.withStatusof != nil,
		}
	)
	_spec.ScanValues = func() []interface{} {
		node := &InspectionResult{config: irq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, irq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := irq.withCarinspections; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*InspectionResult)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.CarInspection(func(s *sql.Selector) {
			s.Where(sql.InValues(inspectionresult.CarinspectionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.inspectionresult_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "inspectionresult_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "inspectionresult_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Carinspections = append(node.Edges.Carinspections, n)
		}
	}

	if query := irq.withStatusof; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*InspectionResult)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Ambulance(func(s *sql.Selector) {
			s.Where(sql.InValues(inspectionresult.StatusofColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.carstatus_id
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "carstatus_id" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "carstatus_id" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Statusof = append(node.Edges.Statusof, n)
		}
	}

	return nodes, nil
}

func (irq *InspectionResultQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := irq.querySpec()
	return sqlgraph.CountNodes(ctx, irq.driver, _spec)
}

func (irq *InspectionResultQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := irq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (irq *InspectionResultQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   inspectionresult.Table,
			Columns: inspectionresult.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: inspectionresult.FieldID,
			},
		},
		From:   irq.sql,
		Unique: true,
	}
	if ps := irq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := irq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := irq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := irq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (irq *InspectionResultQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(irq.driver.Dialect())
	t1 := builder.Table(inspectionresult.Table)
	selector := builder.Select(t1.Columns(inspectionresult.Columns...)...).From(t1)
	if irq.sql != nil {
		selector = irq.sql
		selector.Select(selector.Columns(inspectionresult.Columns...)...)
	}
	for _, p := range irq.predicates {
		p(selector)
	}
	for _, p := range irq.order {
		p(selector)
	}
	if offset := irq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := irq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// InspectionResultGroupBy is the builder for group-by InspectionResult entities.
type InspectionResultGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (irgb *InspectionResultGroupBy) Aggregate(fns ...AggregateFunc) *InspectionResultGroupBy {
	irgb.fns = append(irgb.fns, fns...)
	return irgb
}

// Scan applies the group-by query and scan the result into the given value.
func (irgb *InspectionResultGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := irgb.path(ctx)
	if err != nil {
		return err
	}
	irgb.sql = query
	return irgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (irgb *InspectionResultGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := irgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (irgb *InspectionResultGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(irgb.fields) > 1 {
		return nil, errors.New("ent: InspectionResultGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := irgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (irgb *InspectionResultGroupBy) StringsX(ctx context.Context) []string {
	v, err := irgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (irgb *InspectionResultGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = irgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{inspectionresult.Label}
	default:
		err = fmt.Errorf("ent: InspectionResultGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (irgb *InspectionResultGroupBy) StringX(ctx context.Context) string {
	v, err := irgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (irgb *InspectionResultGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(irgb.fields) > 1 {
		return nil, errors.New("ent: InspectionResultGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := irgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (irgb *InspectionResultGroupBy) IntsX(ctx context.Context) []int {
	v, err := irgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (irgb *InspectionResultGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = irgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{inspectionresult.Label}
	default:
		err = fmt.Errorf("ent: InspectionResultGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (irgb *InspectionResultGroupBy) IntX(ctx context.Context) int {
	v, err := irgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (irgb *InspectionResultGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(irgb.fields) > 1 {
		return nil, errors.New("ent: InspectionResultGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := irgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (irgb *InspectionResultGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := irgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (irgb *InspectionResultGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = irgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{inspectionresult.Label}
	default:
		err = fmt.Errorf("ent: InspectionResultGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (irgb *InspectionResultGroupBy) Float64X(ctx context.Context) float64 {
	v, err := irgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (irgb *InspectionResultGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(irgb.fields) > 1 {
		return nil, errors.New("ent: InspectionResultGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := irgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (irgb *InspectionResultGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := irgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (irgb *InspectionResultGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = irgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{inspectionresult.Label}
	default:
		err = fmt.Errorf("ent: InspectionResultGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (irgb *InspectionResultGroupBy) BoolX(ctx context.Context) bool {
	v, err := irgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (irgb *InspectionResultGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := irgb.sqlQuery().Query()
	if err := irgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (irgb *InspectionResultGroupBy) sqlQuery() *sql.Selector {
	selector := irgb.sql
	columns := make([]string, 0, len(irgb.fields)+len(irgb.fns))
	columns = append(columns, irgb.fields...)
	for _, fn := range irgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(irgb.fields...)
}

// InspectionResultSelect is the builder for select fields of InspectionResult entities.
type InspectionResultSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (irs *InspectionResultSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := irs.path(ctx)
	if err != nil {
		return err
	}
	irs.sql = query
	return irs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (irs *InspectionResultSelect) ScanX(ctx context.Context, v interface{}) {
	if err := irs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (irs *InspectionResultSelect) Strings(ctx context.Context) ([]string, error) {
	if len(irs.fields) > 1 {
		return nil, errors.New("ent: InspectionResultSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := irs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (irs *InspectionResultSelect) StringsX(ctx context.Context) []string {
	v, err := irs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (irs *InspectionResultSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = irs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{inspectionresult.Label}
	default:
		err = fmt.Errorf("ent: InspectionResultSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (irs *InspectionResultSelect) StringX(ctx context.Context) string {
	v, err := irs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (irs *InspectionResultSelect) Ints(ctx context.Context) ([]int, error) {
	if len(irs.fields) > 1 {
		return nil, errors.New("ent: InspectionResultSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := irs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (irs *InspectionResultSelect) IntsX(ctx context.Context) []int {
	v, err := irs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (irs *InspectionResultSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = irs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{inspectionresult.Label}
	default:
		err = fmt.Errorf("ent: InspectionResultSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (irs *InspectionResultSelect) IntX(ctx context.Context) int {
	v, err := irs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (irs *InspectionResultSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(irs.fields) > 1 {
		return nil, errors.New("ent: InspectionResultSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := irs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (irs *InspectionResultSelect) Float64sX(ctx context.Context) []float64 {
	v, err := irs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (irs *InspectionResultSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = irs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{inspectionresult.Label}
	default:
		err = fmt.Errorf("ent: InspectionResultSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (irs *InspectionResultSelect) Float64X(ctx context.Context) float64 {
	v, err := irs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (irs *InspectionResultSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(irs.fields) > 1 {
		return nil, errors.New("ent: InspectionResultSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := irs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (irs *InspectionResultSelect) BoolsX(ctx context.Context) []bool {
	v, err := irs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (irs *InspectionResultSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = irs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{inspectionresult.Label}
	default:
		err = fmt.Errorf("ent: InspectionResultSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (irs *InspectionResultSelect) BoolX(ctx context.Context) bool {
	v, err := irs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (irs *InspectionResultSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := irs.sqlQuery().Query()
	if err := irs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (irs *InspectionResultSelect) sqlQuery() sql.Querier {
	selector := irs.sql
	selector.Select(selector.Columns(irs.fields...)...)
	return selector
}
