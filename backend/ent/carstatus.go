// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team07/app/ent/carstatus"
)

// Carstatus is the model entity for the Carstatus schema.
type Carstatus struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Carstatus holds the value of the "carstatus" field.
	Carstatus string `json:"carstatus,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarstatusQuery when eager-loading is set.
	Edges CarstatusEdges `json:"edges"`
}

// CarstatusEdges holds the relations/edges for other nodes in the graph.
type CarstatusEdges struct {
	// Statusof holds the value of the statusof edge.
	Statusof []*Ambulance
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StatusofOrErr returns the Statusof value or an error if the edge
// was not loaded in eager-loading.
func (e CarstatusEdges) StatusofOrErr() ([]*Ambulance, error) {
	if e.loadedTypes[0] {
		return e.Statusof, nil
	}
	return nil, &NotLoadedError{edge: "statusof"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Carstatus) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // carstatus
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Carstatus fields.
func (c *Carstatus) assignValues(values ...interface{}) error {
	if m, n := len(values), len(carstatus.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field carstatus", values[0])
	} else if value.Valid {
		c.Carstatus = value.String
	}
	return nil
}

// QueryStatusof queries the statusof edge of the Carstatus.
func (c *Carstatus) QueryStatusof() *AmbulanceQuery {
	return (&CarstatusClient{config: c.config}).QueryStatusof(c)
}

// Update returns a builder for updating this Carstatus.
// Note that, you need to call Carstatus.Unwrap() before calling this method, if this Carstatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Carstatus) Update() *CarstatusUpdateOne {
	return (&CarstatusClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Carstatus) Unwrap() *Carstatus {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Carstatus is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Carstatus) String() string {
	var builder strings.Builder
	builder.WriteString("Carstatus(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", carstatus=")
	builder.WriteString(c.Carstatus)
	builder.WriteByte(')')
	return builder.String()
}

// Carstatuses is a parsable slice of Carstatus.
type Carstatuses []*Carstatus

func (c Carstatuses) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
