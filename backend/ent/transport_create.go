// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team07/app/ent/ambulance"
	"github.com/team07/app/ent/hospital"
	"github.com/team07/app/ent/transport"
	"github.com/team07/app/ent/user"
)

// TransportCreate is the builder for creating a Transport entity.
type TransportCreate struct {
	config
	mutation *TransportMutation
	hooks    []Hook
}

// SetSymptom sets the symptom field.
func (tc *TransportCreate) SetSymptom(s string) *TransportCreate {
	tc.mutation.SetSymptom(s)
	return tc
}

// SetDrugallergy sets the drugallergy field.
func (tc *TransportCreate) SetDrugallergy(s string) *TransportCreate {
	tc.mutation.SetDrugallergy(s)
	return tc
}

// SetNote sets the note field.
func (tc *TransportCreate) SetNote(s string) *TransportCreate {
	tc.mutation.SetNote(s)
	return tc
}

// SetSendID sets the send edge to Hospital by id.
func (tc *TransportCreate) SetSendID(id int) *TransportCreate {
	tc.mutation.SetSendID(id)
	return tc
}

// SetNillableSendID sets the send edge to Hospital by id if the given value is not nil.
func (tc *TransportCreate) SetNillableSendID(id *int) *TransportCreate {
	if id != nil {
		tc = tc.SetSendID(*id)
	}
	return tc
}

// SetSend sets the send edge to Hospital.
func (tc *TransportCreate) SetSend(h *Hospital) *TransportCreate {
	return tc.SetSendID(h.ID)
}

// SetReceiveID sets the receive edge to Hospital by id.
func (tc *TransportCreate) SetReceiveID(id int) *TransportCreate {
	tc.mutation.SetReceiveID(id)
	return tc
}

// SetNillableReceiveID sets the receive edge to Hospital by id if the given value is not nil.
func (tc *TransportCreate) SetNillableReceiveID(id *int) *TransportCreate {
	if id != nil {
		tc = tc.SetReceiveID(*id)
	}
	return tc
}

// SetReceive sets the receive edge to Hospital.
func (tc *TransportCreate) SetReceive(h *Hospital) *TransportCreate {
	return tc.SetReceiveID(h.ID)
}

// SetUserID sets the user edge to User by id.
func (tc *TransportCreate) SetUserID(id int) *TransportCreate {
	tc.mutation.SetUserID(id)
	return tc
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (tc *TransportCreate) SetNillableUserID(id *int) *TransportCreate {
	if id != nil {
		tc = tc.SetUserID(*id)
	}
	return tc
}

// SetUser sets the user edge to User.
func (tc *TransportCreate) SetUser(u *User) *TransportCreate {
	return tc.SetUserID(u.ID)
}

// SetAmbulanceID sets the ambulance edge to Ambulance by id.
func (tc *TransportCreate) SetAmbulanceID(id int) *TransportCreate {
	tc.mutation.SetAmbulanceID(id)
	return tc
}

// SetNillableAmbulanceID sets the ambulance edge to Ambulance by id if the given value is not nil.
func (tc *TransportCreate) SetNillableAmbulanceID(id *int) *TransportCreate {
	if id != nil {
		tc = tc.SetAmbulanceID(*id)
	}
	return tc
}

// SetAmbulance sets the ambulance edge to Ambulance.
func (tc *TransportCreate) SetAmbulance(a *Ambulance) *TransportCreate {
	return tc.SetAmbulanceID(a.ID)
}

// Mutation returns the TransportMutation object of the builder.
func (tc *TransportCreate) Mutation() *TransportMutation {
	return tc.mutation
}

// Save creates the Transport in the database.
func (tc *TransportCreate) Save(ctx context.Context) (*Transport, error) {
	if _, ok := tc.mutation.Symptom(); !ok {
		return nil, &ValidationError{Name: "symptom", err: errors.New("ent: missing required field \"symptom\"")}
	}
	if v, ok := tc.mutation.Symptom(); ok {
		if err := transport.SymptomValidator(v); err != nil {
			return nil, &ValidationError{Name: "symptom", err: fmt.Errorf("ent: validator failed for field \"symptom\": %w", err)}
		}
	}
	if _, ok := tc.mutation.Drugallergy(); !ok {
		return nil, &ValidationError{Name: "drugallergy", err: errors.New("ent: missing required field \"drugallergy\"")}
	}
	if v, ok := tc.mutation.Drugallergy(); ok {
		if err := transport.DrugallergyValidator(v); err != nil {
			return nil, &ValidationError{Name: "drugallergy", err: fmt.Errorf("ent: validator failed for field \"drugallergy\": %w", err)}
		}
	}
	if _, ok := tc.mutation.Note(); !ok {
		return nil, &ValidationError{Name: "note", err: errors.New("ent: missing required field \"note\"")}
	}
	if v, ok := tc.mutation.Note(); ok {
		if err := transport.NoteValidator(v); err != nil {
			return nil, &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	var (
		err  error
		node *Transport
	)
	if len(tc.hooks) == 0 {
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tc.mutation = mutation
			node, err = tc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransportCreate) SaveX(ctx context.Context) *Transport {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TransportCreate) sqlSave(ctx context.Context) (*Transport, error) {
	t, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	t.ID = int(id)
	return t, nil
}

func (tc *TransportCreate) createSpec() (*Transport, *sqlgraph.CreateSpec) {
	var (
		t     = &Transport{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: transport.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transport.FieldID,
			},
		}
	)
	if value, ok := tc.mutation.Symptom(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transport.FieldSymptom,
		})
		t.Symptom = value
	}
	if value, ok := tc.mutation.Drugallergy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transport.FieldDrugallergy,
		})
		t.Drugallergy = value
	}
	if value, ok := tc.mutation.Note(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transport.FieldNote,
		})
		t.Note = value
	}
	if nodes := tc.mutation.SendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.SendTable,
			Columns: []string{transport.SendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hospital.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ReceiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.ReceiveTable,
			Columns: []string{transport.ReceiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: hospital.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.UserTable,
			Columns: []string{transport.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.AmbulanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.AmbulanceTable,
			Columns: []string{transport.AmbulanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ambulance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return t, _spec
}
