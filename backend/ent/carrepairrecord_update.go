// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team07/app/ent/carinspection"
	"github.com/team07/app/ent/carrepairrecord"
	"github.com/team07/app/ent/predicate"
	"github.com/team07/app/ent/repairing"
	"github.com/team07/app/ent/user"
)

// CarRepairrecordUpdate is the builder for updating CarRepairrecord entities.
type CarRepairrecordUpdate struct {
	config
	hooks      []Hook
	mutation   *CarRepairrecordMutation
	predicates []predicate.CarRepairrecord
}

// Where adds a new predicate for the builder.
func (cru *CarRepairrecordUpdate) Where(ps ...predicate.CarRepairrecord) *CarRepairrecordUpdate {
	cru.predicates = append(cru.predicates, ps...)
	return cru
}

// SetDatetime sets the datetime field.
func (cru *CarRepairrecordUpdate) SetDatetime(t time.Time) *CarRepairrecordUpdate {
	cru.mutation.SetDatetime(t)
	return cru
}

// SetRepairdetail sets the repairdetail field.
func (cru *CarRepairrecordUpdate) SetRepairdetail(s string) *CarRepairrecordUpdate {
	cru.mutation.SetRepairdetail(s)
	return cru
}

// SetRepaircost sets the repaircost field.
func (cru *CarRepairrecordUpdate) SetRepaircost(i int) *CarRepairrecordUpdate {
	cru.mutation.ResetRepaircost()
	cru.mutation.SetRepaircost(i)
	return cru
}

// AddRepaircost adds i to repaircost.
func (cru *CarRepairrecordUpdate) AddRepaircost(i int) *CarRepairrecordUpdate {
	cru.mutation.AddRepaircost(i)
	return cru
}

// SetCarmaintenance sets the carmaintenance field.
func (cru *CarRepairrecordUpdate) SetCarmaintenance(s string) *CarRepairrecordUpdate {
	cru.mutation.SetCarmaintenance(s)
	return cru
}

// SetKeeperID sets the keeper edge to Repairing by id.
func (cru *CarRepairrecordUpdate) SetKeeperID(id int) *CarRepairrecordUpdate {
	cru.mutation.SetKeeperID(id)
	return cru
}

// SetNillableKeeperID sets the keeper edge to Repairing by id if the given value is not nil.
func (cru *CarRepairrecordUpdate) SetNillableKeeperID(id *int) *CarRepairrecordUpdate {
	if id != nil {
		cru = cru.SetKeeperID(*id)
	}
	return cru
}

// SetKeeper sets the keeper edge to Repairing.
func (cru *CarRepairrecordUpdate) SetKeeper(r *Repairing) *CarRepairrecordUpdate {
	return cru.SetKeeperID(r.ID)
}

// SetUserID sets the user edge to User by id.
func (cru *CarRepairrecordUpdate) SetUserID(id int) *CarRepairrecordUpdate {
	cru.mutation.SetUserID(id)
	return cru
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (cru *CarRepairrecordUpdate) SetNillableUserID(id *int) *CarRepairrecordUpdate {
	if id != nil {
		cru = cru.SetUserID(*id)
	}
	return cru
}

// SetUser sets the user edge to User.
func (cru *CarRepairrecordUpdate) SetUser(u *User) *CarRepairrecordUpdate {
	return cru.SetUserID(u.ID)
}

// SetCarinspectionID sets the carinspection edge to CarInspection by id.
func (cru *CarRepairrecordUpdate) SetCarinspectionID(id int) *CarRepairrecordUpdate {
	cru.mutation.SetCarinspectionID(id)
	return cru
}

// SetNillableCarinspectionID sets the carinspection edge to CarInspection by id if the given value is not nil.
func (cru *CarRepairrecordUpdate) SetNillableCarinspectionID(id *int) *CarRepairrecordUpdate {
	if id != nil {
		cru = cru.SetCarinspectionID(*id)
	}
	return cru
}

// SetCarinspection sets the carinspection edge to CarInspection.
func (cru *CarRepairrecordUpdate) SetCarinspection(c *CarInspection) *CarRepairrecordUpdate {
	return cru.SetCarinspectionID(c.ID)
}

// Mutation returns the CarRepairrecordMutation object of the builder.
func (cru *CarRepairrecordUpdate) Mutation() *CarRepairrecordMutation {
	return cru.mutation
}

// ClearKeeper clears the keeper edge to Repairing.
func (cru *CarRepairrecordUpdate) ClearKeeper() *CarRepairrecordUpdate {
	cru.mutation.ClearKeeper()
	return cru
}

// ClearUser clears the user edge to User.
func (cru *CarRepairrecordUpdate) ClearUser() *CarRepairrecordUpdate {
	cru.mutation.ClearUser()
	return cru
}

// ClearCarinspection clears the carinspection edge to CarInspection.
func (cru *CarRepairrecordUpdate) ClearCarinspection() *CarRepairrecordUpdate {
	cru.mutation.ClearCarinspection()
	return cru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cru *CarRepairrecordUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := cru.mutation.Repairdetail(); ok {
		if err := carrepairrecord.RepairdetailValidator(v); err != nil {
			return 0, &ValidationError{Name: "repairdetail", err: fmt.Errorf("ent: validator failed for field \"repairdetail\": %w", err)}
		}
	}
	if v, ok := cru.mutation.Repaircost(); ok {
		if err := carrepairrecord.RepaircostValidator(v); err != nil {
			return 0, &ValidationError{Name: "repaircost", err: fmt.Errorf("ent: validator failed for field \"repaircost\": %w", err)}
		}
	}
	if v, ok := cru.mutation.Carmaintenance(); ok {
		if err := carrepairrecord.CarmaintenanceValidator(v); err != nil {
			return 0, &ValidationError{Name: "carmaintenance", err: fmt.Errorf("ent: validator failed for field \"carmaintenance\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(cru.hooks) == 0 {
		affected, err = cru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CarRepairrecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cru.mutation = mutation
			affected, err = cru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cru.hooks) - 1; i >= 0; i-- {
			mut = cru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cru *CarRepairrecordUpdate) SaveX(ctx context.Context) int {
	affected, err := cru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cru *CarRepairrecordUpdate) Exec(ctx context.Context) error {
	_, err := cru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cru *CarRepairrecordUpdate) ExecX(ctx context.Context) {
	if err := cru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cru *CarRepairrecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   carrepairrecord.Table,
			Columns: carrepairrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: carrepairrecord.FieldID,
			},
		},
	}
	if ps := cru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cru.mutation.Datetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: carrepairrecord.FieldDatetime,
		})
	}
	if value, ok := cru.mutation.Repairdetail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: carrepairrecord.FieldRepairdetail,
		})
	}
	if value, ok := cru.mutation.Repaircost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: carrepairrecord.FieldRepaircost,
		})
	}
	if value, ok := cru.mutation.AddedRepaircost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: carrepairrecord.FieldRepaircost,
		})
	}
	if value, ok := cru.mutation.Carmaintenance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: carrepairrecord.FieldCarmaintenance,
		})
	}
	if cru.mutation.KeeperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrepairrecord.KeeperTable,
			Columns: []string{carrepairrecord.KeeperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairing.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.KeeperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrepairrecord.KeeperTable,
			Columns: []string{carrepairrecord.KeeperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairing.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrepairrecord.UserTable,
			Columns: []string{carrepairrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrepairrecord.UserTable,
			Columns: []string{carrepairrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cru.mutation.CarinspectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrepairrecord.CarinspectionTable,
			Columns: []string{carrepairrecord.CarinspectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: carinspection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cru.mutation.CarinspectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrepairrecord.CarinspectionTable,
			Columns: []string{carrepairrecord.CarinspectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: carinspection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrepairrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CarRepairrecordUpdateOne is the builder for updating a single CarRepairrecord entity.
type CarRepairrecordUpdateOne struct {
	config
	hooks    []Hook
	mutation *CarRepairrecordMutation
}

// SetDatetime sets the datetime field.
func (cruo *CarRepairrecordUpdateOne) SetDatetime(t time.Time) *CarRepairrecordUpdateOne {
	cruo.mutation.SetDatetime(t)
	return cruo
}

// SetRepairdetail sets the repairdetail field.
func (cruo *CarRepairrecordUpdateOne) SetRepairdetail(s string) *CarRepairrecordUpdateOne {
	cruo.mutation.SetRepairdetail(s)
	return cruo
}

// SetRepaircost sets the repaircost field.
func (cruo *CarRepairrecordUpdateOne) SetRepaircost(i int) *CarRepairrecordUpdateOne {
	cruo.mutation.ResetRepaircost()
	cruo.mutation.SetRepaircost(i)
	return cruo
}

// AddRepaircost adds i to repaircost.
func (cruo *CarRepairrecordUpdateOne) AddRepaircost(i int) *CarRepairrecordUpdateOne {
	cruo.mutation.AddRepaircost(i)
	return cruo
}

// SetCarmaintenance sets the carmaintenance field.
func (cruo *CarRepairrecordUpdateOne) SetCarmaintenance(s string) *CarRepairrecordUpdateOne {
	cruo.mutation.SetCarmaintenance(s)
	return cruo
}

// SetKeeperID sets the keeper edge to Repairing by id.
func (cruo *CarRepairrecordUpdateOne) SetKeeperID(id int) *CarRepairrecordUpdateOne {
	cruo.mutation.SetKeeperID(id)
	return cruo
}

// SetNillableKeeperID sets the keeper edge to Repairing by id if the given value is not nil.
func (cruo *CarRepairrecordUpdateOne) SetNillableKeeperID(id *int) *CarRepairrecordUpdateOne {
	if id != nil {
		cruo = cruo.SetKeeperID(*id)
	}
	return cruo
}

// SetKeeper sets the keeper edge to Repairing.
func (cruo *CarRepairrecordUpdateOne) SetKeeper(r *Repairing) *CarRepairrecordUpdateOne {
	return cruo.SetKeeperID(r.ID)
}

// SetUserID sets the user edge to User by id.
func (cruo *CarRepairrecordUpdateOne) SetUserID(id int) *CarRepairrecordUpdateOne {
	cruo.mutation.SetUserID(id)
	return cruo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (cruo *CarRepairrecordUpdateOne) SetNillableUserID(id *int) *CarRepairrecordUpdateOne {
	if id != nil {
		cruo = cruo.SetUserID(*id)
	}
	return cruo
}

// SetUser sets the user edge to User.
func (cruo *CarRepairrecordUpdateOne) SetUser(u *User) *CarRepairrecordUpdateOne {
	return cruo.SetUserID(u.ID)
}

// SetCarinspectionID sets the carinspection edge to CarInspection by id.
func (cruo *CarRepairrecordUpdateOne) SetCarinspectionID(id int) *CarRepairrecordUpdateOne {
	cruo.mutation.SetCarinspectionID(id)
	return cruo
}

// SetNillableCarinspectionID sets the carinspection edge to CarInspection by id if the given value is not nil.
func (cruo *CarRepairrecordUpdateOne) SetNillableCarinspectionID(id *int) *CarRepairrecordUpdateOne {
	if id != nil {
		cruo = cruo.SetCarinspectionID(*id)
	}
	return cruo
}

// SetCarinspection sets the carinspection edge to CarInspection.
func (cruo *CarRepairrecordUpdateOne) SetCarinspection(c *CarInspection) *CarRepairrecordUpdateOne {
	return cruo.SetCarinspectionID(c.ID)
}

// Mutation returns the CarRepairrecordMutation object of the builder.
func (cruo *CarRepairrecordUpdateOne) Mutation() *CarRepairrecordMutation {
	return cruo.mutation
}

// ClearKeeper clears the keeper edge to Repairing.
func (cruo *CarRepairrecordUpdateOne) ClearKeeper() *CarRepairrecordUpdateOne {
	cruo.mutation.ClearKeeper()
	return cruo
}

// ClearUser clears the user edge to User.
func (cruo *CarRepairrecordUpdateOne) ClearUser() *CarRepairrecordUpdateOne {
	cruo.mutation.ClearUser()
	return cruo
}

// ClearCarinspection clears the carinspection edge to CarInspection.
func (cruo *CarRepairrecordUpdateOne) ClearCarinspection() *CarRepairrecordUpdateOne {
	cruo.mutation.ClearCarinspection()
	return cruo
}

// Save executes the query and returns the updated entity.
func (cruo *CarRepairrecordUpdateOne) Save(ctx context.Context) (*CarRepairrecord, error) {
	if v, ok := cruo.mutation.Repairdetail(); ok {
		if err := carrepairrecord.RepairdetailValidator(v); err != nil {
			return nil, &ValidationError{Name: "repairdetail", err: fmt.Errorf("ent: validator failed for field \"repairdetail\": %w", err)}
		}
	}
	if v, ok := cruo.mutation.Repaircost(); ok {
		if err := carrepairrecord.RepaircostValidator(v); err != nil {
			return nil, &ValidationError{Name: "repaircost", err: fmt.Errorf("ent: validator failed for field \"repaircost\": %w", err)}
		}
	}
	if v, ok := cruo.mutation.Carmaintenance(); ok {
		if err := carrepairrecord.CarmaintenanceValidator(v); err != nil {
			return nil, &ValidationError{Name: "carmaintenance", err: fmt.Errorf("ent: validator failed for field \"carmaintenance\": %w", err)}
		}
	}

	var (
		err  error
		node *CarRepairrecord
	)
	if len(cruo.hooks) == 0 {
		node, err = cruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CarRepairrecordMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cruo.mutation = mutation
			node, err = cruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cruo.hooks) - 1; i >= 0; i-- {
			mut = cruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cruo *CarRepairrecordUpdateOne) SaveX(ctx context.Context) *CarRepairrecord {
	cr, err := cruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return cr
}

// Exec executes the query on the entity.
func (cruo *CarRepairrecordUpdateOne) Exec(ctx context.Context) error {
	_, err := cruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cruo *CarRepairrecordUpdateOne) ExecX(ctx context.Context) {
	if err := cruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cruo *CarRepairrecordUpdateOne) sqlSave(ctx context.Context) (cr *CarRepairrecord, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   carrepairrecord.Table,
			Columns: carrepairrecord.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: carrepairrecord.FieldID,
			},
		},
	}
	id, ok := cruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CarRepairrecord.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cruo.mutation.Datetime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: carrepairrecord.FieldDatetime,
		})
	}
	if value, ok := cruo.mutation.Repairdetail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: carrepairrecord.FieldRepairdetail,
		})
	}
	if value, ok := cruo.mutation.Repaircost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: carrepairrecord.FieldRepaircost,
		})
	}
	if value, ok := cruo.mutation.AddedRepaircost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: carrepairrecord.FieldRepaircost,
		})
	}
	if value, ok := cruo.mutation.Carmaintenance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: carrepairrecord.FieldCarmaintenance,
		})
	}
	if cruo.mutation.KeeperCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrepairrecord.KeeperTable,
			Columns: []string{carrepairrecord.KeeperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairing.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.KeeperIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrepairrecord.KeeperTable,
			Columns: []string{carrepairrecord.KeeperColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: repairing.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrepairrecord.UserTable,
			Columns: []string{carrepairrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrepairrecord.UserTable,
			Columns: []string{carrepairrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cruo.mutation.CarinspectionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrepairrecord.CarinspectionTable,
			Columns: []string{carrepairrecord.CarinspectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: carinspection.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cruo.mutation.CarinspectionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   carrepairrecord.CarinspectionTable,
			Columns: []string{carrepairrecord.CarinspectionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: carinspection.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	cr = &CarRepairrecord{config: cruo.config}
	_spec.Assign = cr.assignValues
	_spec.ScanValues = cr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carrepairrecord.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return cr, nil
}
