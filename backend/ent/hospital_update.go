// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team07/app/ent/hospital"
	"github.com/team07/app/ent/predicate"
	"github.com/team07/app/ent/transport"
)

// HospitalUpdate is the builder for updating Hospital entities.
type HospitalUpdate struct {
	config
	hooks      []Hook
	mutation   *HospitalMutation
	predicates []predicate.Hospital
}

// Where adds a new predicate for the builder.
func (hu *HospitalUpdate) Where(ps ...predicate.Hospital) *HospitalUpdate {
	hu.predicates = append(hu.predicates, ps...)
	return hu
}

// SetHospital sets the hospital field.
func (hu *HospitalUpdate) SetHospital(s string) *HospitalUpdate {
	hu.mutation.SetHospital(s)
	return hu
}

// AddReceiveIDs adds the receive edge to Transport by ids.
func (hu *HospitalUpdate) AddReceiveIDs(ids ...int) *HospitalUpdate {
	hu.mutation.AddReceiveIDs(ids...)
	return hu
}

// AddReceive adds the receive edges to Transport.
func (hu *HospitalUpdate) AddReceive(t ...*Transport) *HospitalUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return hu.AddReceiveIDs(ids...)
}

// AddSendIDs adds the send edge to Transport by ids.
func (hu *HospitalUpdate) AddSendIDs(ids ...int) *HospitalUpdate {
	hu.mutation.AddSendIDs(ids...)
	return hu
}

// AddSend adds the send edges to Transport.
func (hu *HospitalUpdate) AddSend(t ...*Transport) *HospitalUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return hu.AddSendIDs(ids...)
}

// Mutation returns the HospitalMutation object of the builder.
func (hu *HospitalUpdate) Mutation() *HospitalMutation {
	return hu.mutation
}

// RemoveReceiveIDs removes the receive edge to Transport by ids.
func (hu *HospitalUpdate) RemoveReceiveIDs(ids ...int) *HospitalUpdate {
	hu.mutation.RemoveReceiveIDs(ids...)
	return hu
}

// RemoveReceive removes receive edges to Transport.
func (hu *HospitalUpdate) RemoveReceive(t ...*Transport) *HospitalUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return hu.RemoveReceiveIDs(ids...)
}

// RemoveSendIDs removes the send edge to Transport by ids.
func (hu *HospitalUpdate) RemoveSendIDs(ids ...int) *HospitalUpdate {
	hu.mutation.RemoveSendIDs(ids...)
	return hu
}

// RemoveSend removes send edges to Transport.
func (hu *HospitalUpdate) RemoveSend(t ...*Transport) *HospitalUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return hu.RemoveSendIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (hu *HospitalUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(hu.hooks) == 0 {
		affected, err = hu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HospitalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			hu.mutation = mutation
			affected, err = hu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(hu.hooks) - 1; i >= 0; i-- {
			mut = hu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, hu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (hu *HospitalUpdate) SaveX(ctx context.Context) int {
	affected, err := hu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (hu *HospitalUpdate) Exec(ctx context.Context) error {
	_, err := hu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hu *HospitalUpdate) ExecX(ctx context.Context) {
	if err := hu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (hu *HospitalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hospital.Table,
			Columns: hospital.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hospital.FieldID,
			},
		},
	}
	if ps := hu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := hu.mutation.Hospital(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hospital.FieldHospital,
		})
	}
	if nodes := hu.mutation.RemovedReceiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hospital.ReceiveTable,
			Columns: []string{hospital.ReceiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.ReceiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hospital.ReceiveTable,
			Columns: []string{hospital.ReceiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := hu.mutation.RemovedSendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hospital.SendTable,
			Columns: []string{hospital.SendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := hu.mutation.SendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hospital.SendTable,
			Columns: []string{hospital.SendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, hu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hospital.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// HospitalUpdateOne is the builder for updating a single Hospital entity.
type HospitalUpdateOne struct {
	config
	hooks    []Hook
	mutation *HospitalMutation
}

// SetHospital sets the hospital field.
func (huo *HospitalUpdateOne) SetHospital(s string) *HospitalUpdateOne {
	huo.mutation.SetHospital(s)
	return huo
}

// AddReceiveIDs adds the receive edge to Transport by ids.
func (huo *HospitalUpdateOne) AddReceiveIDs(ids ...int) *HospitalUpdateOne {
	huo.mutation.AddReceiveIDs(ids...)
	return huo
}

// AddReceive adds the receive edges to Transport.
func (huo *HospitalUpdateOne) AddReceive(t ...*Transport) *HospitalUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return huo.AddReceiveIDs(ids...)
}

// AddSendIDs adds the send edge to Transport by ids.
func (huo *HospitalUpdateOne) AddSendIDs(ids ...int) *HospitalUpdateOne {
	huo.mutation.AddSendIDs(ids...)
	return huo
}

// AddSend adds the send edges to Transport.
func (huo *HospitalUpdateOne) AddSend(t ...*Transport) *HospitalUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return huo.AddSendIDs(ids...)
}

// Mutation returns the HospitalMutation object of the builder.
func (huo *HospitalUpdateOne) Mutation() *HospitalMutation {
	return huo.mutation
}

// RemoveReceiveIDs removes the receive edge to Transport by ids.
func (huo *HospitalUpdateOne) RemoveReceiveIDs(ids ...int) *HospitalUpdateOne {
	huo.mutation.RemoveReceiveIDs(ids...)
	return huo
}

// RemoveReceive removes receive edges to Transport.
func (huo *HospitalUpdateOne) RemoveReceive(t ...*Transport) *HospitalUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return huo.RemoveReceiveIDs(ids...)
}

// RemoveSendIDs removes the send edge to Transport by ids.
func (huo *HospitalUpdateOne) RemoveSendIDs(ids ...int) *HospitalUpdateOne {
	huo.mutation.RemoveSendIDs(ids...)
	return huo
}

// RemoveSend removes send edges to Transport.
func (huo *HospitalUpdateOne) RemoveSend(t ...*Transport) *HospitalUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return huo.RemoveSendIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (huo *HospitalUpdateOne) Save(ctx context.Context) (*Hospital, error) {

	var (
		err  error
		node *Hospital
	)
	if len(huo.hooks) == 0 {
		node, err = huo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*HospitalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			huo.mutation = mutation
			node, err = huo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(huo.hooks) - 1; i >= 0; i-- {
			mut = huo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, huo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (huo *HospitalUpdateOne) SaveX(ctx context.Context) *Hospital {
	h, err := huo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return h
}

// Exec executes the query on the entity.
func (huo *HospitalUpdateOne) Exec(ctx context.Context) error {
	_, err := huo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (huo *HospitalUpdateOne) ExecX(ctx context.Context) {
	if err := huo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (huo *HospitalUpdateOne) sqlSave(ctx context.Context) (h *Hospital, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   hospital.Table,
			Columns: hospital.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hospital.FieldID,
			},
		},
	}
	id, ok := huo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Hospital.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := huo.mutation.Hospital(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: hospital.FieldHospital,
		})
	}
	if nodes := huo.mutation.RemovedReceiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hospital.ReceiveTable,
			Columns: []string{hospital.ReceiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.ReceiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hospital.ReceiveTable,
			Columns: []string{hospital.ReceiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := huo.mutation.RemovedSendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hospital.SendTable,
			Columns: []string{hospital.SendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := huo.mutation.SendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   hospital.SendTable,
			Columns: []string{hospital.SendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transport.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	h = &Hospital{config: huo.config}
	_spec.Assign = h.assignValues
	_spec.ScanValues = h.scanValues()
	if err = sqlgraph.UpdateNode(ctx, huo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hospital.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return h, nil
}
