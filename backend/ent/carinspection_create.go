// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team07/app/ent/carinspection"
)

// CarInspectionCreate is the builder for creating a CarInspection entity.
type CarInspectionCreate struct {
	config
	mutation *CarInspectionMutation
	hooks    []Hook
}

// Mutation returns the CarInspectionMutation object of the builder.
func (cic *CarInspectionCreate) Mutation() *CarInspectionMutation {
	return cic.mutation
}

// Save creates the CarInspection in the database.
func (cic *CarInspectionCreate) Save(ctx context.Context) (*CarInspection, error) {
	var (
		err  error
		node *CarInspection
	)
	if len(cic.hooks) == 0 {
		node, err = cic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CarInspectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cic.mutation = mutation
			node, err = cic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cic.hooks) - 1; i >= 0; i-- {
			mut = cic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cic *CarInspectionCreate) SaveX(ctx context.Context) *CarInspection {
	v, err := cic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cic *CarInspectionCreate) sqlSave(ctx context.Context) (*CarInspection, error) {
	ci, _spec := cic.createSpec()
	if err := sqlgraph.CreateNode(ctx, cic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ci.ID = int(id)
	return ci, nil
}

func (cic *CarInspectionCreate) createSpec() (*CarInspection, *sqlgraph.CreateSpec) {
	var (
		ci    = &CarInspection{config: cic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: carinspection.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: carinspection.FieldID,
			},
		}
	)
	return ci, _spec
}
