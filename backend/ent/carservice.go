// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team07/app/ent/carservice"
	"github.com/team07/app/ent/distance"
	"github.com/team07/app/ent/urgent"
	"github.com/team07/app/ent/user"
)

// Carservice is the model entity for the Carservice schema.
type Carservice struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Customer holds the value of the "customer" field.
	Customer string `json:"customer,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Information holds the value of the "information" field.
	Information string `json:"information,omitempty"`
	// Datetime holds the value of the "Datetime" field.
	Datetime time.Time `json:"Datetime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarserviceQuery when eager-loading is set.
	Edges           CarserviceEdges `json:"edges"`
	distance_disid  *int
	urgent_urgentid *int
	user_id         *int
}

// CarserviceEdges holds the relations/edges for other nodes in the graph.
type CarserviceEdges struct {
	// Userid holds the value of the userid edge.
	Userid *User
	// Disid holds the value of the disid edge.
	Disid *Distance
	// Urgentid holds the value of the urgentid edge.
	Urgentid *Urgent
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UseridOrErr returns the Userid value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarserviceEdges) UseridOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Userid == nil {
			// The edge userid was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Userid, nil
	}
	return nil, &NotLoadedError{edge: "userid"}
}

// DisidOrErr returns the Disid value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarserviceEdges) DisidOrErr() (*Distance, error) {
	if e.loadedTypes[1] {
		if e.Disid == nil {
			// The edge disid was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: distance.Label}
		}
		return e.Disid, nil
	}
	return nil, &NotLoadedError{edge: "disid"}
}

// UrgentidOrErr returns the Urgentid value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CarserviceEdges) UrgentidOrErr() (*Urgent, error) {
	if e.loadedTypes[2] {
		if e.Urgentid == nil {
			// The edge urgentid was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: urgent.Label}
		}
		return e.Urgentid, nil
	}
	return nil, &NotLoadedError{edge: "urgentid"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Carservice) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // customer
		&sql.NullInt64{},  // age
		&sql.NullString{}, // location
		&sql.NullString{}, // information
		&sql.NullTime{},   // Datetime
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Carservice) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // distance_disid
		&sql.NullInt64{}, // urgent_urgentid
		&sql.NullInt64{}, // user_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Carservice fields.
func (c *Carservice) assignValues(values ...interface{}) error {
	if m, n := len(values), len(carservice.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field customer", values[0])
	} else if value.Valid {
		c.Customer = value.String
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field age", values[1])
	} else if value.Valid {
		c.Age = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field location", values[2])
	} else if value.Valid {
		c.Location = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field information", values[3])
	} else if value.Valid {
		c.Information = value.String
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field Datetime", values[4])
	} else if value.Valid {
		c.Datetime = value.Time
	}
	values = values[5:]
	if len(values) == len(carservice.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field distance_disid", value)
		} else if value.Valid {
			c.distance_disid = new(int)
			*c.distance_disid = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field urgent_urgentid", value)
		} else if value.Valid {
			c.urgent_urgentid = new(int)
			*c.urgent_urgentid = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_id", value)
		} else if value.Valid {
			c.user_id = new(int)
			*c.user_id = int(value.Int64)
		}
	}
	return nil
}

// QueryUserid queries the userid edge of the Carservice.
func (c *Carservice) QueryUserid() *UserQuery {
	return (&CarserviceClient{config: c.config}).QueryUserid(c)
}

// QueryDisid queries the disid edge of the Carservice.
func (c *Carservice) QueryDisid() *DistanceQuery {
	return (&CarserviceClient{config: c.config}).QueryDisid(c)
}

// QueryUrgentid queries the urgentid edge of the Carservice.
func (c *Carservice) QueryUrgentid() *UrgentQuery {
	return (&CarserviceClient{config: c.config}).QueryUrgentid(c)
}

// Update returns a builder for updating this Carservice.
// Note that, you need to call Carservice.Unwrap() before calling this method, if this Carservice
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Carservice) Update() *CarserviceUpdateOne {
	return (&CarserviceClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Carservice) Unwrap() *Carservice {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Carservice is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Carservice) String() string {
	var builder strings.Builder
	builder.WriteString("Carservice(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", customer=")
	builder.WriteString(c.Customer)
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", c.Age))
	builder.WriteString(", location=")
	builder.WriteString(c.Location)
	builder.WriteString(", information=")
	builder.WriteString(c.Information)
	builder.WriteString(", Datetime=")
	builder.WriteString(c.Datetime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Carservices is a parsable slice of Carservice.
type Carservices []*Carservice

func (c Carservices) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
