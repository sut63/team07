// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team07/app/ent/carbrand"
)

// Carbrand is the model entity for the Carbrand schema.
type Carbrand struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Brand holds the value of the "brand" field.
	Brand string `json:"brand,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CarbrandQuery when eager-loading is set.
	Edges CarbrandEdges `json:"edges"`
}

// CarbrandEdges holds the relations/edges for other nodes in the graph.
type CarbrandEdges struct {
	// Brandof holds the value of the brandof edge.
	Brandof []*Ambulance
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BrandofOrErr returns the Brandof value or an error if the edge
// was not loaded in eager-loading.
func (e CarbrandEdges) BrandofOrErr() ([]*Ambulance, error) {
	if e.loadedTypes[0] {
		return e.Brandof, nil
	}
	return nil, &NotLoadedError{edge: "brandof"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Carbrand) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // brand
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Carbrand fields.
func (c *Carbrand) assignValues(values ...interface{}) error {
	if m, n := len(values), len(carbrand.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field brand", values[0])
	} else if value.Valid {
		c.Brand = value.String
	}
	return nil
}

// QueryBrandof queries the brandof edge of the Carbrand.
func (c *Carbrand) QueryBrandof() *AmbulanceQuery {
	return (&CarbrandClient{config: c.config}).QueryBrandof(c)
}

// Update returns a builder for updating this Carbrand.
// Note that, you need to call Carbrand.Unwrap() before calling this method, if this Carbrand
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Carbrand) Update() *CarbrandUpdateOne {
	return (&CarbrandClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Carbrand) Unwrap() *Carbrand {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Carbrand is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Carbrand) String() string {
	var builder strings.Builder
	builder.WriteString("Carbrand(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", brand=")
	builder.WriteString(c.Brand)
	builder.WriteByte(')')
	return builder.String()
}

// Carbrands is a parsable slice of Carbrand.
type Carbrands []*Carbrand

func (c Carbrands) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
