// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team07/app/ent/jobposition"
)

// JobPosition is the model entity for the JobPosition schema.
type JobPosition struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PositionName holds the value of the "position_name" field.
	PositionName string `json:"position_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobPositionQuery when eager-loading is set.
	Edges JobPositionEdges `json:"edges"`
}

// JobPositionEdges holds the relations/edges for other nodes in the graph.
type JobPositionEdges struct {
	// Users holds the value of the users edge.
	Users []*User
	// Inspectionresults holds the value of the inspectionresults edge.
	Inspectionresults []*InspectionResult
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e JobPositionEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// InspectionresultsOrErr returns the Inspectionresults value or an error if the edge
// was not loaded in eager-loading.
func (e JobPositionEdges) InspectionresultsOrErr() ([]*InspectionResult, error) {
	if e.loadedTypes[1] {
		return e.Inspectionresults, nil
	}
	return nil, &NotLoadedError{edge: "inspectionresults"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobPosition) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // position_name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobPosition fields.
func (jp *JobPosition) assignValues(values ...interface{}) error {
	if m, n := len(values), len(jobposition.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	jp.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field position_name", values[0])
	} else if value.Valid {
		jp.PositionName = value.String
	}
	return nil
}

// QueryUsers queries the users edge of the JobPosition.
func (jp *JobPosition) QueryUsers() *UserQuery {
	return (&JobPositionClient{config: jp.config}).QueryUsers(jp)
}

// QueryInspectionresults queries the inspectionresults edge of the JobPosition.
func (jp *JobPosition) QueryInspectionresults() *InspectionResultQuery {
	return (&JobPositionClient{config: jp.config}).QueryInspectionresults(jp)
}

// Update returns a builder for updating this JobPosition.
// Note that, you need to call JobPosition.Unwrap() before calling this method, if this JobPosition
// was returned from a transaction, and the transaction was committed or rolled back.
func (jp *JobPosition) Update() *JobPositionUpdateOne {
	return (&JobPositionClient{config: jp.config}).UpdateOne(jp)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (jp *JobPosition) Unwrap() *JobPosition {
	tx, ok := jp.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobPosition is not a transactional entity")
	}
	jp.config.driver = tx.drv
	return jp
}

// String implements the fmt.Stringer.
func (jp *JobPosition) String() string {
	var builder strings.Builder
	builder.WriteString("JobPosition(")
	builder.WriteString(fmt.Sprintf("id=%v", jp.ID))
	builder.WriteString(", position_name=")
	builder.WriteString(jp.PositionName)
	builder.WriteByte(')')
	return builder.String()
}

// JobPositions is a parsable slice of JobPosition.
type JobPositions []*JobPosition

func (jp JobPositions) config(cfg config) {
	for _i := range jp {
		jp[_i].config = cfg
	}
}
