// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/team07/app/ent/migrate"

	"github.com/team07/app/ent/ambulance"
	"github.com/team07/app/ent/carbrand"
	"github.com/team07/app/ent/carcheckinout"
	"github.com/team07/app/ent/carinspection"
	"github.com/team07/app/ent/carregister"
	"github.com/team07/app/ent/carrepairrecord"
	"github.com/team07/app/ent/carservice"
	"github.com/team07/app/ent/deliver"
	"github.com/team07/app/ent/distances"
	"github.com/team07/app/ent/inspectionresult"
	"github.com/team07/app/ent/insurance"
	"github.com/team07/app/ent/jobposition"
	"github.com/team07/app/ent/purpose"
	"github.com/team07/app/ent/urgent"
	"github.com/team07/app/ent/user"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Ambulance is the client for interacting with the Ambulance builders.
	Ambulance *AmbulanceClient
	// CarCheckInOut is the client for interacting with the CarCheckInOut builders.
	CarCheckInOut *CarCheckInOutClient
	// CarInspection is the client for interacting with the CarInspection builders.
	CarInspection *CarInspectionClient
	// CarRepairrecord is the client for interacting with the CarRepairrecord builders.
	CarRepairrecord *CarRepairrecordClient
	// Carbrand is the client for interacting with the Carbrand builders.
	Carbrand *CarbrandClient
	// Carregister is the client for interacting with the Carregister builders.
	Carregister *CarregisterClient
	// Carservice is the client for interacting with the Carservice builders.
	Carservice *CarserviceClient
	// Deliver is the client for interacting with the Deliver builders.
	Deliver *DeliverClient
	// Distances is the client for interacting with the Distances builders.
	Distances *DistancesClient
	// InspectionResult is the client for interacting with the InspectionResult builders.
	InspectionResult *InspectionResultClient
	// Insurance is the client for interacting with the Insurance builders.
	Insurance *InsuranceClient
	// JobPosition is the client for interacting with the JobPosition builders.
	JobPosition *JobPositionClient
	// Purpose is the client for interacting with the Purpose builders.
	Purpose *PurposeClient
	// Urgent is the client for interacting with the Urgent builders.
	Urgent *UrgentClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Ambulance = NewAmbulanceClient(c.config)
	c.CarCheckInOut = NewCarCheckInOutClient(c.config)
	c.CarInspection = NewCarInspectionClient(c.config)
	c.CarRepairrecord = NewCarRepairrecordClient(c.config)
	c.Carbrand = NewCarbrandClient(c.config)
	c.Carregister = NewCarregisterClient(c.config)
	c.Carservice = NewCarserviceClient(c.config)
	c.Deliver = NewDeliverClient(c.config)
	c.Distances = NewDistancesClient(c.config)
	c.InspectionResult = NewInspectionResultClient(c.config)
	c.Insurance = NewInsuranceClient(c.config)
	c.JobPosition = NewJobPositionClient(c.config)
	c.Purpose = NewPurposeClient(c.config)
	c.Urgent = NewUrgentClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		Ambulance:        NewAmbulanceClient(cfg),
		CarCheckInOut:    NewCarCheckInOutClient(cfg),
		CarInspection:    NewCarInspectionClient(cfg),
		CarRepairrecord:  NewCarRepairrecordClient(cfg),
		Carbrand:         NewCarbrandClient(cfg),
		Carregister:      NewCarregisterClient(cfg),
		Carservice:       NewCarserviceClient(cfg),
		Deliver:          NewDeliverClient(cfg),
		Distances:        NewDistancesClient(cfg),
		InspectionResult: NewInspectionResultClient(cfg),
		Insurance:        NewInsuranceClient(cfg),
		JobPosition:      NewJobPositionClient(cfg),
		Purpose:          NewPurposeClient(cfg),
		Urgent:           NewUrgentClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:           cfg,
		Ambulance:        NewAmbulanceClient(cfg),
		CarCheckInOut:    NewCarCheckInOutClient(cfg),
		CarInspection:    NewCarInspectionClient(cfg),
		CarRepairrecord:  NewCarRepairrecordClient(cfg),
		Carbrand:         NewCarbrandClient(cfg),
		Carregister:      NewCarregisterClient(cfg),
		Carservice:       NewCarserviceClient(cfg),
		Deliver:          NewDeliverClient(cfg),
		Distances:        NewDistancesClient(cfg),
		InspectionResult: NewInspectionResultClient(cfg),
		Insurance:        NewInsuranceClient(cfg),
		JobPosition:      NewJobPositionClient(cfg),
		Purpose:          NewPurposeClient(cfg),
		Urgent:           NewUrgentClient(cfg),
		User:             NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Ambulance.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Ambulance.Use(hooks...)
	c.CarCheckInOut.Use(hooks...)
	c.CarInspection.Use(hooks...)
	c.CarRepairrecord.Use(hooks...)
	c.Carbrand.Use(hooks...)
	c.Carregister.Use(hooks...)
	c.Carservice.Use(hooks...)
	c.Deliver.Use(hooks...)
	c.Distances.Use(hooks...)
	c.InspectionResult.Use(hooks...)
	c.Insurance.Use(hooks...)
	c.JobPosition.Use(hooks...)
	c.Purpose.Use(hooks...)
	c.Urgent.Use(hooks...)
	c.User.Use(hooks...)
}

// AmbulanceClient is a client for the Ambulance schema.
type AmbulanceClient struct {
	config
}

// NewAmbulanceClient returns a client for the Ambulance from the given config.
func NewAmbulanceClient(c config) *AmbulanceClient {
	return &AmbulanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ambulance.Hooks(f(g(h())))`.
func (c *AmbulanceClient) Use(hooks ...Hook) {
	c.hooks.Ambulance = append(c.hooks.Ambulance, hooks...)
}

// Create returns a create builder for Ambulance.
func (c *AmbulanceClient) Create() *AmbulanceCreate {
	mutation := newAmbulanceMutation(c.config, OpCreate)
	return &AmbulanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Ambulance.
func (c *AmbulanceClient) Update() *AmbulanceUpdate {
	mutation := newAmbulanceMutation(c.config, OpUpdate)
	return &AmbulanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AmbulanceClient) UpdateOne(a *Ambulance) *AmbulanceUpdateOne {
	mutation := newAmbulanceMutation(c.config, OpUpdateOne, withAmbulance(a))
	return &AmbulanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AmbulanceClient) UpdateOneID(id int) *AmbulanceUpdateOne {
	mutation := newAmbulanceMutation(c.config, OpUpdateOne, withAmbulanceID(id))
	return &AmbulanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Ambulance.
func (c *AmbulanceClient) Delete() *AmbulanceDelete {
	mutation := newAmbulanceMutation(c.config, OpDelete)
	return &AmbulanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AmbulanceClient) DeleteOne(a *Ambulance) *AmbulanceDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AmbulanceClient) DeleteOneID(id int) *AmbulanceDeleteOne {
	builder := c.Delete().Where(ambulance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AmbulanceDeleteOne{builder}
}

// Create returns a query builder for Ambulance.
func (c *AmbulanceClient) Query() *AmbulanceQuery {
	return &AmbulanceQuery{config: c.config}
}

// Get returns a Ambulance entity by its id.
func (c *AmbulanceClient) Get(ctx context.Context, id int) (*Ambulance, error) {
	return c.Query().Where(ambulance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AmbulanceClient) GetX(ctx context.Context, id int) *Ambulance {
	a, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return a
}

// QueryHasbrand queries the hasbrand edge of a Ambulance.
func (c *AmbulanceClient) QueryHasbrand(a *Ambulance) *CarbrandQuery {
	query := &CarbrandQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ambulance.Table, ambulance.FieldID, id),
			sqlgraph.To(carbrand.Table, carbrand.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ambulance.HasbrandTable, ambulance.HasbrandColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHasinsurance queries the hasinsurance edge of a Ambulance.
func (c *AmbulanceClient) QueryHasinsurance(a *Ambulance) *InsuranceQuery {
	query := &InsuranceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ambulance.Table, ambulance.FieldID, id),
			sqlgraph.To(insurance.Table, insurance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ambulance.HasinsuranceTable, ambulance.HasinsuranceColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHasstatus queries the hasstatus edge of a Ambulance.
func (c *AmbulanceClient) QueryHasstatus(a *Ambulance) *InspectionResultQuery {
	query := &InspectionResultQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ambulance.Table, ambulance.FieldID, id),
			sqlgraph.To(inspectionresult.Table, inspectionresult.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ambulance.HasstatusTable, ambulance.HasstatusColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHasuser queries the hasuser edge of a Ambulance.
func (c *AmbulanceClient) QueryHasuser(a *Ambulance) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ambulance.Table, ambulance.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ambulance.HasuserTable, ambulance.HasuserColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarinspections queries the carinspections edge of a Ambulance.
func (c *AmbulanceClient) QueryCarinspections(a *Ambulance) *CarInspectionQuery {
	query := &CarInspectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ambulance.Table, ambulance.FieldID, id),
			sqlgraph.To(carinspection.Table, carinspection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ambulance.CarinspectionsTable, ambulance.CarinspectionsColumn),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AmbulanceClient) Hooks() []Hook {
	return c.hooks.Ambulance
}

// CarCheckInOutClient is a client for the CarCheckInOut schema.
type CarCheckInOutClient struct {
	config
}

// NewCarCheckInOutClient returns a client for the CarCheckInOut from the given config.
func NewCarCheckInOutClient(c config) *CarCheckInOutClient {
	return &CarCheckInOutClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carcheckinout.Hooks(f(g(h())))`.
func (c *CarCheckInOutClient) Use(hooks ...Hook) {
	c.hooks.CarCheckInOut = append(c.hooks.CarCheckInOut, hooks...)
}

// Create returns a create builder for CarCheckInOut.
func (c *CarCheckInOutClient) Create() *CarCheckInOutCreate {
	mutation := newCarCheckInOutMutation(c.config, OpCreate)
	return &CarCheckInOutCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for CarCheckInOut.
func (c *CarCheckInOutClient) Update() *CarCheckInOutUpdate {
	mutation := newCarCheckInOutMutation(c.config, OpUpdate)
	return &CarCheckInOutUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarCheckInOutClient) UpdateOne(ccio *CarCheckInOut) *CarCheckInOutUpdateOne {
	mutation := newCarCheckInOutMutation(c.config, OpUpdateOne, withCarCheckInOut(ccio))
	return &CarCheckInOutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarCheckInOutClient) UpdateOneID(id int) *CarCheckInOutUpdateOne {
	mutation := newCarCheckInOutMutation(c.config, OpUpdateOne, withCarCheckInOutID(id))
	return &CarCheckInOutUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarCheckInOut.
func (c *CarCheckInOutClient) Delete() *CarCheckInOutDelete {
	mutation := newCarCheckInOutMutation(c.config, OpDelete)
	return &CarCheckInOutDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CarCheckInOutClient) DeleteOne(ccio *CarCheckInOut) *CarCheckInOutDeleteOne {
	return c.DeleteOneID(ccio.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CarCheckInOutClient) DeleteOneID(id int) *CarCheckInOutDeleteOne {
	builder := c.Delete().Where(carcheckinout.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarCheckInOutDeleteOne{builder}
}

// Create returns a query builder for CarCheckInOut.
func (c *CarCheckInOutClient) Query() *CarCheckInOutQuery {
	return &CarCheckInOutQuery{config: c.config}
}

// Get returns a CarCheckInOut entity by its id.
func (c *CarCheckInOutClient) Get(ctx context.Context, id int) (*CarCheckInOut, error) {
	return c.Query().Where(carcheckinout.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarCheckInOutClient) GetX(ctx context.Context, id int) *CarCheckInOut {
	ccio, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ccio
}

// Hooks returns the client hooks.
func (c *CarCheckInOutClient) Hooks() []Hook {
	return c.hooks.CarCheckInOut
}

// CarInspectionClient is a client for the CarInspection schema.
type CarInspectionClient struct {
	config
}

// NewCarInspectionClient returns a client for the CarInspection from the given config.
func NewCarInspectionClient(c config) *CarInspectionClient {
	return &CarInspectionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carinspection.Hooks(f(g(h())))`.
func (c *CarInspectionClient) Use(hooks ...Hook) {
	c.hooks.CarInspection = append(c.hooks.CarInspection, hooks...)
}

// Create returns a create builder for CarInspection.
func (c *CarInspectionClient) Create() *CarInspectionCreate {
	mutation := newCarInspectionMutation(c.config, OpCreate)
	return &CarInspectionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for CarInspection.
func (c *CarInspectionClient) Update() *CarInspectionUpdate {
	mutation := newCarInspectionMutation(c.config, OpUpdate)
	return &CarInspectionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarInspectionClient) UpdateOne(ci *CarInspection) *CarInspectionUpdateOne {
	mutation := newCarInspectionMutation(c.config, OpUpdateOne, withCarInspection(ci))
	return &CarInspectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarInspectionClient) UpdateOneID(id int) *CarInspectionUpdateOne {
	mutation := newCarInspectionMutation(c.config, OpUpdateOne, withCarInspectionID(id))
	return &CarInspectionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarInspection.
func (c *CarInspectionClient) Delete() *CarInspectionDelete {
	mutation := newCarInspectionMutation(c.config, OpDelete)
	return &CarInspectionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CarInspectionClient) DeleteOne(ci *CarInspection) *CarInspectionDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CarInspectionClient) DeleteOneID(id int) *CarInspectionDeleteOne {
	builder := c.Delete().Where(carinspection.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarInspectionDeleteOne{builder}
}

// Create returns a query builder for CarInspection.
func (c *CarInspectionClient) Query() *CarInspectionQuery {
	return &CarInspectionQuery{config: c.config}
}

// Get returns a CarInspection entity by its id.
func (c *CarInspectionClient) Get(ctx context.Context, id int) (*CarInspection, error) {
	return c.Query().Where(carinspection.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarInspectionClient) GetX(ctx context.Context, id int) *CarInspection {
	ci, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ci
}

// QueryUser queries the user edge of a CarInspection.
func (c *CarInspectionClient) QueryUser(ci *CarInspection) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carinspection.Table, carinspection.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carinspection.UserTable, carinspection.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAmbulance queries the ambulance edge of a CarInspection.
func (c *CarInspectionClient) QueryAmbulance(ci *CarInspection) *AmbulanceQuery {
	query := &AmbulanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carinspection.Table, carinspection.FieldID, id),
			sqlgraph.To(ambulance.Table, ambulance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carinspection.AmbulanceTable, carinspection.AmbulanceColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInspectionresult queries the inspectionresult edge of a CarInspection.
func (c *CarInspectionClient) QueryInspectionresult(ci *CarInspection) *InspectionResultQuery {
	query := &InspectionResultQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ci.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carinspection.Table, carinspection.FieldID, id),
			sqlgraph.To(inspectionresult.Table, inspectionresult.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carinspection.InspectionresultTable, carinspection.InspectionresultColumn),
		)
		fromV = sqlgraph.Neighbors(ci.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarInspectionClient) Hooks() []Hook {
	return c.hooks.CarInspection
}

// CarRepairrecordClient is a client for the CarRepairrecord schema.
type CarRepairrecordClient struct {
	config
}

// NewCarRepairrecordClient returns a client for the CarRepairrecord from the given config.
func NewCarRepairrecordClient(c config) *CarRepairrecordClient {
	return &CarRepairrecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carrepairrecord.Hooks(f(g(h())))`.
func (c *CarRepairrecordClient) Use(hooks ...Hook) {
	c.hooks.CarRepairrecord = append(c.hooks.CarRepairrecord, hooks...)
}

// Create returns a create builder for CarRepairrecord.
func (c *CarRepairrecordClient) Create() *CarRepairrecordCreate {
	mutation := newCarRepairrecordMutation(c.config, OpCreate)
	return &CarRepairrecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for CarRepairrecord.
func (c *CarRepairrecordClient) Update() *CarRepairrecordUpdate {
	mutation := newCarRepairrecordMutation(c.config, OpUpdate)
	return &CarRepairrecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarRepairrecordClient) UpdateOne(cr *CarRepairrecord) *CarRepairrecordUpdateOne {
	mutation := newCarRepairrecordMutation(c.config, OpUpdateOne, withCarRepairrecord(cr))
	return &CarRepairrecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarRepairrecordClient) UpdateOneID(id int) *CarRepairrecordUpdateOne {
	mutation := newCarRepairrecordMutation(c.config, OpUpdateOne, withCarRepairrecordID(id))
	return &CarRepairrecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CarRepairrecord.
func (c *CarRepairrecordClient) Delete() *CarRepairrecordDelete {
	mutation := newCarRepairrecordMutation(c.config, OpDelete)
	return &CarRepairrecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CarRepairrecordClient) DeleteOne(cr *CarRepairrecord) *CarRepairrecordDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CarRepairrecordClient) DeleteOneID(id int) *CarRepairrecordDeleteOne {
	builder := c.Delete().Where(carrepairrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarRepairrecordDeleteOne{builder}
}

// Create returns a query builder for CarRepairrecord.
func (c *CarRepairrecordClient) Query() *CarRepairrecordQuery {
	return &CarRepairrecordQuery{config: c.config}
}

// Get returns a CarRepairrecord entity by its id.
func (c *CarRepairrecordClient) Get(ctx context.Context, id int) (*CarRepairrecord, error) {
	return c.Query().Where(carrepairrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarRepairrecordClient) GetX(ctx context.Context, id int) *CarRepairrecord {
	cr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return cr
}

// Hooks returns the client hooks.
func (c *CarRepairrecordClient) Hooks() []Hook {
	return c.hooks.CarRepairrecord
}

// CarbrandClient is a client for the Carbrand schema.
type CarbrandClient struct {
	config
}

// NewCarbrandClient returns a client for the Carbrand from the given config.
func NewCarbrandClient(c config) *CarbrandClient {
	return &CarbrandClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carbrand.Hooks(f(g(h())))`.
func (c *CarbrandClient) Use(hooks ...Hook) {
	c.hooks.Carbrand = append(c.hooks.Carbrand, hooks...)
}

// Create returns a create builder for Carbrand.
func (c *CarbrandClient) Create() *CarbrandCreate {
	mutation := newCarbrandMutation(c.config, OpCreate)
	return &CarbrandCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Carbrand.
func (c *CarbrandClient) Update() *CarbrandUpdate {
	mutation := newCarbrandMutation(c.config, OpUpdate)
	return &CarbrandUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarbrandClient) UpdateOne(ca *Carbrand) *CarbrandUpdateOne {
	mutation := newCarbrandMutation(c.config, OpUpdateOne, withCarbrand(ca))
	return &CarbrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarbrandClient) UpdateOneID(id int) *CarbrandUpdateOne {
	mutation := newCarbrandMutation(c.config, OpUpdateOne, withCarbrandID(id))
	return &CarbrandUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Carbrand.
func (c *CarbrandClient) Delete() *CarbrandDelete {
	mutation := newCarbrandMutation(c.config, OpDelete)
	return &CarbrandDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CarbrandClient) DeleteOne(ca *Carbrand) *CarbrandDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CarbrandClient) DeleteOneID(id int) *CarbrandDeleteOne {
	builder := c.Delete().Where(carbrand.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarbrandDeleteOne{builder}
}

// Create returns a query builder for Carbrand.
func (c *CarbrandClient) Query() *CarbrandQuery {
	return &CarbrandQuery{config: c.config}
}

// Get returns a Carbrand entity by its id.
func (c *CarbrandClient) Get(ctx context.Context, id int) (*Carbrand, error) {
	return c.Query().Where(carbrand.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarbrandClient) GetX(ctx context.Context, id int) *Carbrand {
	ca, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ca
}

// QueryBrandof queries the brandof edge of a Carbrand.
func (c *CarbrandClient) QueryBrandof(ca *Carbrand) *AmbulanceQuery {
	query := &AmbulanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carbrand.Table, carbrand.FieldID, id),
			sqlgraph.To(ambulance.Table, ambulance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, carbrand.BrandofTable, carbrand.BrandofColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarbrandClient) Hooks() []Hook {
	return c.hooks.Carbrand
}

// CarregisterClient is a client for the Carregister schema.
type CarregisterClient struct {
	config
}

// NewCarregisterClient returns a client for the Carregister from the given config.
func NewCarregisterClient(c config) *CarregisterClient {
	return &CarregisterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carregister.Hooks(f(g(h())))`.
func (c *CarregisterClient) Use(hooks ...Hook) {
	c.hooks.Carregister = append(c.hooks.Carregister, hooks...)
}

// Create returns a create builder for Carregister.
func (c *CarregisterClient) Create() *CarregisterCreate {
	mutation := newCarregisterMutation(c.config, OpCreate)
	return &CarregisterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Carregister.
func (c *CarregisterClient) Update() *CarregisterUpdate {
	mutation := newCarregisterMutation(c.config, OpUpdate)
	return &CarregisterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarregisterClient) UpdateOne(ca *Carregister) *CarregisterUpdateOne {
	mutation := newCarregisterMutation(c.config, OpUpdateOne, withCarregister(ca))
	return &CarregisterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarregisterClient) UpdateOneID(id int) *CarregisterUpdateOne {
	mutation := newCarregisterMutation(c.config, OpUpdateOne, withCarregisterID(id))
	return &CarregisterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Carregister.
func (c *CarregisterClient) Delete() *CarregisterDelete {
	mutation := newCarregisterMutation(c.config, OpDelete)
	return &CarregisterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CarregisterClient) DeleteOne(ca *Carregister) *CarregisterDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CarregisterClient) DeleteOneID(id int) *CarregisterDeleteOne {
	builder := c.Delete().Where(carregister.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarregisterDeleteOne{builder}
}

// Create returns a query builder for Carregister.
func (c *CarregisterClient) Query() *CarregisterQuery {
	return &CarregisterQuery{config: c.config}
}

// Get returns a Carregister entity by its id.
func (c *CarregisterClient) Get(ctx context.Context, id int) (*Carregister, error) {
	return c.Query().Where(carregister.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarregisterClient) GetX(ctx context.Context, id int) *Carregister {
	ca, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ca
}

// Hooks returns the client hooks.
func (c *CarregisterClient) Hooks() []Hook {
	return c.hooks.Carregister
}

// CarserviceClient is a client for the Carservice schema.
type CarserviceClient struct {
	config
}

// NewCarserviceClient returns a client for the Carservice from the given config.
func NewCarserviceClient(c config) *CarserviceClient {
	return &CarserviceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `carservice.Hooks(f(g(h())))`.
func (c *CarserviceClient) Use(hooks ...Hook) {
	c.hooks.Carservice = append(c.hooks.Carservice, hooks...)
}

// Create returns a create builder for Carservice.
func (c *CarserviceClient) Create() *CarserviceCreate {
	mutation := newCarserviceMutation(c.config, OpCreate)
	return &CarserviceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Carservice.
func (c *CarserviceClient) Update() *CarserviceUpdate {
	mutation := newCarserviceMutation(c.config, OpUpdate)
	return &CarserviceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarserviceClient) UpdateOne(ca *Carservice) *CarserviceUpdateOne {
	mutation := newCarserviceMutation(c.config, OpUpdateOne, withCarservice(ca))
	return &CarserviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarserviceClient) UpdateOneID(id int) *CarserviceUpdateOne {
	mutation := newCarserviceMutation(c.config, OpUpdateOne, withCarserviceID(id))
	return &CarserviceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Carservice.
func (c *CarserviceClient) Delete() *CarserviceDelete {
	mutation := newCarserviceMutation(c.config, OpDelete)
	return &CarserviceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CarserviceClient) DeleteOne(ca *Carservice) *CarserviceDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CarserviceClient) DeleteOneID(id int) *CarserviceDeleteOne {
	builder := c.Delete().Where(carservice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarserviceDeleteOne{builder}
}

// Create returns a query builder for Carservice.
func (c *CarserviceClient) Query() *CarserviceQuery {
	return &CarserviceQuery{config: c.config}
}

// Get returns a Carservice entity by its id.
func (c *CarserviceClient) Get(ctx context.Context, id int) (*Carservice, error) {
	return c.Query().Where(carservice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarserviceClient) GetX(ctx context.Context, id int) *Carservice {
	ca, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ca
}

// QueryUserid queries the userid edge of a Carservice.
func (c *CarserviceClient) QueryUserid(ca *Carservice) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carservice.Table, carservice.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carservice.UseridTable, carservice.UseridColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDisid queries the disid edge of a Carservice.
func (c *CarserviceClient) QueryDisid(ca *Carservice) *DistancesQuery {
	query := &DistancesQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carservice.Table, carservice.FieldID, id),
			sqlgraph.To(distances.Table, distances.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carservice.DisidTable, carservice.DisidColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUrgentid queries the urgentid edge of a Carservice.
func (c *CarserviceClient) QueryUrgentid(ca *Carservice) *UrgentQuery {
	query := &UrgentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(carservice.Table, carservice.FieldID, id),
			sqlgraph.To(urgent.Table, urgent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, carservice.UrgentidTable, carservice.UrgentidColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarserviceClient) Hooks() []Hook {
	return c.hooks.Carservice
}

// DeliverClient is a client for the Deliver schema.
type DeliverClient struct {
	config
}

// NewDeliverClient returns a client for the Deliver from the given config.
func NewDeliverClient(c config) *DeliverClient {
	return &DeliverClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deliver.Hooks(f(g(h())))`.
func (c *DeliverClient) Use(hooks ...Hook) {
	c.hooks.Deliver = append(c.hooks.Deliver, hooks...)
}

// Create returns a create builder for Deliver.
func (c *DeliverClient) Create() *DeliverCreate {
	mutation := newDeliverMutation(c.config, OpCreate)
	return &DeliverCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Deliver.
func (c *DeliverClient) Update() *DeliverUpdate {
	mutation := newDeliverMutation(c.config, OpUpdate)
	return &DeliverUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeliverClient) UpdateOne(d *Deliver) *DeliverUpdateOne {
	mutation := newDeliverMutation(c.config, OpUpdateOne, withDeliver(d))
	return &DeliverUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeliverClient) UpdateOneID(id int) *DeliverUpdateOne {
	mutation := newDeliverMutation(c.config, OpUpdateOne, withDeliverID(id))
	return &DeliverUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Deliver.
func (c *DeliverClient) Delete() *DeliverDelete {
	mutation := newDeliverMutation(c.config, OpDelete)
	return &DeliverDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DeliverClient) DeleteOne(d *Deliver) *DeliverDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DeliverClient) DeleteOneID(id int) *DeliverDeleteOne {
	builder := c.Delete().Where(deliver.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeliverDeleteOne{builder}
}

// Create returns a query builder for Deliver.
func (c *DeliverClient) Query() *DeliverQuery {
	return &DeliverQuery{config: c.config}
}

// Get returns a Deliver entity by its id.
func (c *DeliverClient) Get(ctx context.Context, id int) (*Deliver, error) {
	return c.Query().Where(deliver.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeliverClient) GetX(ctx context.Context, id int) *Deliver {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// Hooks returns the client hooks.
func (c *DeliverClient) Hooks() []Hook {
	return c.hooks.Deliver
}

// DistancesClient is a client for the Distances schema.
type DistancesClient struct {
	config
}

// NewDistancesClient returns a client for the Distances from the given config.
func NewDistancesClient(c config) *DistancesClient {
	return &DistancesClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `distances.Hooks(f(g(h())))`.
func (c *DistancesClient) Use(hooks ...Hook) {
	c.hooks.Distances = append(c.hooks.Distances, hooks...)
}

// Create returns a create builder for Distances.
func (c *DistancesClient) Create() *DistancesCreate {
	mutation := newDistancesMutation(c.config, OpCreate)
	return &DistancesCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Distances.
func (c *DistancesClient) Update() *DistancesUpdate {
	mutation := newDistancesMutation(c.config, OpUpdate)
	return &DistancesUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DistancesClient) UpdateOne(d *Distances) *DistancesUpdateOne {
	mutation := newDistancesMutation(c.config, OpUpdateOne, withDistances(d))
	return &DistancesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DistancesClient) UpdateOneID(id int) *DistancesUpdateOne {
	mutation := newDistancesMutation(c.config, OpUpdateOne, withDistancesID(id))
	return &DistancesUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Distances.
func (c *DistancesClient) Delete() *DistancesDelete {
	mutation := newDistancesMutation(c.config, OpDelete)
	return &DistancesDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DistancesClient) DeleteOne(d *Distances) *DistancesDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DistancesClient) DeleteOneID(id int) *DistancesDeleteOne {
	builder := c.Delete().Where(distances.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DistancesDeleteOne{builder}
}

// Create returns a query builder for Distances.
func (c *DistancesClient) Query() *DistancesQuery {
	return &DistancesQuery{config: c.config}
}

// Get returns a Distances entity by its id.
func (c *DistancesClient) Get(ctx context.Context, id int) (*Distances, error) {
	return c.Query().Where(distances.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DistancesClient) GetX(ctx context.Context, id int) *Distances {
	d, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return d
}

// QueryDisid queries the disid edge of a Distances.
func (c *DistancesClient) QueryDisid(d *Distances) *CarserviceQuery {
	query := &CarserviceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(distances.Table, distances.FieldID, id),
			sqlgraph.To(carservice.Table, carservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, distances.DisidTable, distances.DisidColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DistancesClient) Hooks() []Hook {
	return c.hooks.Distances
}

// InspectionResultClient is a client for the InspectionResult schema.
type InspectionResultClient struct {
	config
}

// NewInspectionResultClient returns a client for the InspectionResult from the given config.
func NewInspectionResultClient(c config) *InspectionResultClient {
	return &InspectionResultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inspectionresult.Hooks(f(g(h())))`.
func (c *InspectionResultClient) Use(hooks ...Hook) {
	c.hooks.InspectionResult = append(c.hooks.InspectionResult, hooks...)
}

// Create returns a create builder for InspectionResult.
func (c *InspectionResultClient) Create() *InspectionResultCreate {
	mutation := newInspectionResultMutation(c.config, OpCreate)
	return &InspectionResultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for InspectionResult.
func (c *InspectionResultClient) Update() *InspectionResultUpdate {
	mutation := newInspectionResultMutation(c.config, OpUpdate)
	return &InspectionResultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InspectionResultClient) UpdateOne(ir *InspectionResult) *InspectionResultUpdateOne {
	mutation := newInspectionResultMutation(c.config, OpUpdateOne, withInspectionResult(ir))
	return &InspectionResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InspectionResultClient) UpdateOneID(id int) *InspectionResultUpdateOne {
	mutation := newInspectionResultMutation(c.config, OpUpdateOne, withInspectionResultID(id))
	return &InspectionResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InspectionResult.
func (c *InspectionResultClient) Delete() *InspectionResultDelete {
	mutation := newInspectionResultMutation(c.config, OpDelete)
	return &InspectionResultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InspectionResultClient) DeleteOne(ir *InspectionResult) *InspectionResultDeleteOne {
	return c.DeleteOneID(ir.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InspectionResultClient) DeleteOneID(id int) *InspectionResultDeleteOne {
	builder := c.Delete().Where(inspectionresult.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InspectionResultDeleteOne{builder}
}

// Create returns a query builder for InspectionResult.
func (c *InspectionResultClient) Query() *InspectionResultQuery {
	return &InspectionResultQuery{config: c.config}
}

// Get returns a InspectionResult entity by its id.
func (c *InspectionResultClient) Get(ctx context.Context, id int) (*InspectionResult, error) {
	return c.Query().Where(inspectionresult.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InspectionResultClient) GetX(ctx context.Context, id int) *InspectionResult {
	ir, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ir
}

// QueryCarinspections queries the carinspections edge of a InspectionResult.
func (c *InspectionResultClient) QueryCarinspections(ir *InspectionResult) *CarInspectionQuery {
	query := &CarInspectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inspectionresult.Table, inspectionresult.FieldID, id),
			sqlgraph.To(carinspection.Table, carinspection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, inspectionresult.CarinspectionsTable, inspectionresult.CarinspectionsColumn),
		)
		fromV = sqlgraph.Neighbors(ir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStatusof queries the statusof edge of a InspectionResult.
func (c *InspectionResultClient) QueryStatusof(ir *InspectionResult) *AmbulanceQuery {
	query := &AmbulanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inspectionresult.Table, inspectionresult.FieldID, id),
			sqlgraph.To(ambulance.Table, ambulance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, inspectionresult.StatusofTable, inspectionresult.StatusofColumn),
		)
		fromV = sqlgraph.Neighbors(ir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InspectionResultClient) Hooks() []Hook {
	return c.hooks.InspectionResult
}

// InsuranceClient is a client for the Insurance schema.
type InsuranceClient struct {
	config
}

// NewInsuranceClient returns a client for the Insurance from the given config.
func NewInsuranceClient(c config) *InsuranceClient {
	return &InsuranceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `insurance.Hooks(f(g(h())))`.
func (c *InsuranceClient) Use(hooks ...Hook) {
	c.hooks.Insurance = append(c.hooks.Insurance, hooks...)
}

// Create returns a create builder for Insurance.
func (c *InsuranceClient) Create() *InsuranceCreate {
	mutation := newInsuranceMutation(c.config, OpCreate)
	return &InsuranceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Insurance.
func (c *InsuranceClient) Update() *InsuranceUpdate {
	mutation := newInsuranceMutation(c.config, OpUpdate)
	return &InsuranceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InsuranceClient) UpdateOne(i *Insurance) *InsuranceUpdateOne {
	mutation := newInsuranceMutation(c.config, OpUpdateOne, withInsurance(i))
	return &InsuranceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InsuranceClient) UpdateOneID(id int) *InsuranceUpdateOne {
	mutation := newInsuranceMutation(c.config, OpUpdateOne, withInsuranceID(id))
	return &InsuranceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Insurance.
func (c *InsuranceClient) Delete() *InsuranceDelete {
	mutation := newInsuranceMutation(c.config, OpDelete)
	return &InsuranceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InsuranceClient) DeleteOne(i *Insurance) *InsuranceDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InsuranceClient) DeleteOneID(id int) *InsuranceDeleteOne {
	builder := c.Delete().Where(insurance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InsuranceDeleteOne{builder}
}

// Create returns a query builder for Insurance.
func (c *InsuranceClient) Query() *InsuranceQuery {
	return &InsuranceQuery{config: c.config}
}

// Get returns a Insurance entity by its id.
func (c *InsuranceClient) Get(ctx context.Context, id int) (*Insurance, error) {
	return c.Query().Where(insurance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InsuranceClient) GetX(ctx context.Context, id int) *Insurance {
	i, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return i
}

// QueryInsuranceof queries the insuranceof edge of a Insurance.
func (c *InsuranceClient) QueryInsuranceof(i *Insurance) *AmbulanceQuery {
	query := &AmbulanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(insurance.Table, insurance.FieldID, id),
			sqlgraph.To(ambulance.Table, ambulance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, insurance.InsuranceofTable, insurance.InsuranceofColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InsuranceClient) Hooks() []Hook {
	return c.hooks.Insurance
}

// JobPositionClient is a client for the JobPosition schema.
type JobPositionClient struct {
	config
}

// NewJobPositionClient returns a client for the JobPosition from the given config.
func NewJobPositionClient(c config) *JobPositionClient {
	return &JobPositionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobposition.Hooks(f(g(h())))`.
func (c *JobPositionClient) Use(hooks ...Hook) {
	c.hooks.JobPosition = append(c.hooks.JobPosition, hooks...)
}

// Create returns a create builder for JobPosition.
func (c *JobPositionClient) Create() *JobPositionCreate {
	mutation := newJobPositionMutation(c.config, OpCreate)
	return &JobPositionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for JobPosition.
func (c *JobPositionClient) Update() *JobPositionUpdate {
	mutation := newJobPositionMutation(c.config, OpUpdate)
	return &JobPositionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobPositionClient) UpdateOne(jp *JobPosition) *JobPositionUpdateOne {
	mutation := newJobPositionMutation(c.config, OpUpdateOne, withJobPosition(jp))
	return &JobPositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobPositionClient) UpdateOneID(id int) *JobPositionUpdateOne {
	mutation := newJobPositionMutation(c.config, OpUpdateOne, withJobPositionID(id))
	return &JobPositionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobPosition.
func (c *JobPositionClient) Delete() *JobPositionDelete {
	mutation := newJobPositionMutation(c.config, OpDelete)
	return &JobPositionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *JobPositionClient) DeleteOne(jp *JobPosition) *JobPositionDeleteOne {
	return c.DeleteOneID(jp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *JobPositionClient) DeleteOneID(id int) *JobPositionDeleteOne {
	builder := c.Delete().Where(jobposition.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobPositionDeleteOne{builder}
}

// Create returns a query builder for JobPosition.
func (c *JobPositionClient) Query() *JobPositionQuery {
	return &JobPositionQuery{config: c.config}
}

// Get returns a JobPosition entity by its id.
func (c *JobPositionClient) Get(ctx context.Context, id int) (*JobPosition, error) {
	return c.Query().Where(jobposition.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobPositionClient) GetX(ctx context.Context, id int) *JobPosition {
	jp, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return jp
}

// QueryUsers queries the users edge of a JobPosition.
func (c *JobPositionClient) QueryUsers(jp *JobPosition) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := jp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobposition.Table, jobposition.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, jobposition.UsersTable, jobposition.UsersColumn),
		)
		fromV = sqlgraph.Neighbors(jp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobPositionClient) Hooks() []Hook {
	return c.hooks.JobPosition
}

// PurposeClient is a client for the Purpose schema.
type PurposeClient struct {
	config
}

// NewPurposeClient returns a client for the Purpose from the given config.
func NewPurposeClient(c config) *PurposeClient {
	return &PurposeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `purpose.Hooks(f(g(h())))`.
func (c *PurposeClient) Use(hooks ...Hook) {
	c.hooks.Purpose = append(c.hooks.Purpose, hooks...)
}

// Create returns a create builder for Purpose.
func (c *PurposeClient) Create() *PurposeCreate {
	mutation := newPurposeMutation(c.config, OpCreate)
	return &PurposeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Purpose.
func (c *PurposeClient) Update() *PurposeUpdate {
	mutation := newPurposeMutation(c.config, OpUpdate)
	return &PurposeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PurposeClient) UpdateOne(pu *Purpose) *PurposeUpdateOne {
	mutation := newPurposeMutation(c.config, OpUpdateOne, withPurpose(pu))
	return &PurposeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PurposeClient) UpdateOneID(id int) *PurposeUpdateOne {
	mutation := newPurposeMutation(c.config, OpUpdateOne, withPurposeID(id))
	return &PurposeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Purpose.
func (c *PurposeClient) Delete() *PurposeDelete {
	mutation := newPurposeMutation(c.config, OpDelete)
	return &PurposeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PurposeClient) DeleteOne(pu *Purpose) *PurposeDeleteOne {
	return c.DeleteOneID(pu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PurposeClient) DeleteOneID(id int) *PurposeDeleteOne {
	builder := c.Delete().Where(purpose.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PurposeDeleteOne{builder}
}

// Create returns a query builder for Purpose.
func (c *PurposeClient) Query() *PurposeQuery {
	return &PurposeQuery{config: c.config}
}

// Get returns a Purpose entity by its id.
func (c *PurposeClient) Get(ctx context.Context, id int) (*Purpose, error) {
	return c.Query().Where(purpose.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PurposeClient) GetX(ctx context.Context, id int) *Purpose {
	pu, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return pu
}

// Hooks returns the client hooks.
func (c *PurposeClient) Hooks() []Hook {
	return c.hooks.Purpose
}

// UrgentClient is a client for the Urgent schema.
type UrgentClient struct {
	config
}

// NewUrgentClient returns a client for the Urgent from the given config.
func NewUrgentClient(c config) *UrgentClient {
	return &UrgentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `urgent.Hooks(f(g(h())))`.
func (c *UrgentClient) Use(hooks ...Hook) {
	c.hooks.Urgent = append(c.hooks.Urgent, hooks...)
}

// Create returns a create builder for Urgent.
func (c *UrgentClient) Create() *UrgentCreate {
	mutation := newUrgentMutation(c.config, OpCreate)
	return &UrgentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Urgent.
func (c *UrgentClient) Update() *UrgentUpdate {
	mutation := newUrgentMutation(c.config, OpUpdate)
	return &UrgentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UrgentClient) UpdateOne(u *Urgent) *UrgentUpdateOne {
	mutation := newUrgentMutation(c.config, OpUpdateOne, withUrgent(u))
	return &UrgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UrgentClient) UpdateOneID(id int) *UrgentUpdateOne {
	mutation := newUrgentMutation(c.config, OpUpdateOne, withUrgentID(id))
	return &UrgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Urgent.
func (c *UrgentClient) Delete() *UrgentDelete {
	mutation := newUrgentMutation(c.config, OpDelete)
	return &UrgentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UrgentClient) DeleteOne(u *Urgent) *UrgentDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UrgentClient) DeleteOneID(id int) *UrgentDeleteOne {
	builder := c.Delete().Where(urgent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UrgentDeleteOne{builder}
}

// Create returns a query builder for Urgent.
func (c *UrgentClient) Query() *UrgentQuery {
	return &UrgentQuery{config: c.config}
}

// Get returns a Urgent entity by its id.
func (c *UrgentClient) Get(ctx context.Context, id int) (*Urgent, error) {
	return c.Query().Where(urgent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UrgentClient) GetX(ctx context.Context, id int) *Urgent {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryUrgentid queries the urgentid edge of a Urgent.
func (c *UrgentClient) QueryUrgentid(u *Urgent) *CarserviceQuery {
	query := &CarserviceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(urgent.Table, urgent.FieldID, id),
			sqlgraph.To(carservice.Table, carservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, urgent.UrgentidTable, urgent.UrgentidColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UrgentClient) Hooks() []Hook {
	return c.hooks.Urgent
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryJobposition queries the jobposition edge of a User.
func (c *UserClient) QueryJobposition(u *User) *JobPositionQuery {
	query := &JobPositionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(jobposition.Table, jobposition.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.JobpositionTable, user.JobpositionColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserof queries the userof edge of a User.
func (c *UserClient) QueryUserof(u *User) *AmbulanceQuery {
	query := &AmbulanceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(ambulance.Table, ambulance.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserofTable, user.UserofColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserid queries the userid edge of a User.
func (c *UserClient) QueryUserid(u *User) *CarserviceQuery {
	query := &CarserviceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(carservice.Table, carservice.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UseridTable, user.UseridColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCarinspections queries the carinspections edge of a User.
func (c *UserClient) QueryCarinspections(u *User) *CarInspectionQuery {
	query := &CarInspectionQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(carinspection.Table, carinspection.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CarinspectionsTable, user.CarinspectionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
