// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team07/app/ent/ambulance"
	"github.com/team07/app/ent/predicate"
	"github.com/team07/app/ent/receive"
	"github.com/team07/app/ent/send"
	"github.com/team07/app/ent/transport"
	"github.com/team07/app/ent/user"
)

// TransportUpdate is the builder for updating Transport entities.
type TransportUpdate struct {
	config
	hooks      []Hook
	mutation   *TransportMutation
	predicates []predicate.Transport
}

// Where adds a new predicate for the builder.
func (tu *TransportUpdate) Where(ps ...predicate.Transport) *TransportUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetSendidID sets the sendid edge to Send by id.
func (tu *TransportUpdate) SetSendidID(id int) *TransportUpdate {
	tu.mutation.SetSendidID(id)
	return tu
}

// SetNillableSendidID sets the sendid edge to Send by id if the given value is not nil.
func (tu *TransportUpdate) SetNillableSendidID(id *int) *TransportUpdate {
	if id != nil {
		tu = tu.SetSendidID(*id)
	}
	return tu
}

// SetSendid sets the sendid edge to Send.
func (tu *TransportUpdate) SetSendid(s *Send) *TransportUpdate {
	return tu.SetSendidID(s.ID)
}

// SetReceiveidID sets the receiveid edge to Receive by id.
func (tu *TransportUpdate) SetReceiveidID(id int) *TransportUpdate {
	tu.mutation.SetReceiveidID(id)
	return tu
}

// SetNillableReceiveidID sets the receiveid edge to Receive by id if the given value is not nil.
func (tu *TransportUpdate) SetNillableReceiveidID(id *int) *TransportUpdate {
	if id != nil {
		tu = tu.SetReceiveidID(*id)
	}
	return tu
}

// SetReceiveid sets the receiveid edge to Receive.
func (tu *TransportUpdate) SetReceiveid(r *Receive) *TransportUpdate {
	return tu.SetReceiveidID(r.ID)
}

// SetUserID sets the user edge to User by id.
func (tu *TransportUpdate) SetUserID(id int) *TransportUpdate {
	tu.mutation.SetUserID(id)
	return tu
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (tu *TransportUpdate) SetNillableUserID(id *int) *TransportUpdate {
	if id != nil {
		tu = tu.SetUserID(*id)
	}
	return tu
}

// SetUser sets the user edge to User.
func (tu *TransportUpdate) SetUser(u *User) *TransportUpdate {
	return tu.SetUserID(u.ID)
}

// SetAmbulanceID sets the ambulance edge to Ambulance by id.
func (tu *TransportUpdate) SetAmbulanceID(id int) *TransportUpdate {
	tu.mutation.SetAmbulanceID(id)
	return tu
}

// SetNillableAmbulanceID sets the ambulance edge to Ambulance by id if the given value is not nil.
func (tu *TransportUpdate) SetNillableAmbulanceID(id *int) *TransportUpdate {
	if id != nil {
		tu = tu.SetAmbulanceID(*id)
	}
	return tu
}

// SetAmbulance sets the ambulance edge to Ambulance.
func (tu *TransportUpdate) SetAmbulance(a *Ambulance) *TransportUpdate {
	return tu.SetAmbulanceID(a.ID)
}

// Mutation returns the TransportMutation object of the builder.
func (tu *TransportUpdate) Mutation() *TransportMutation {
	return tu.mutation
}

// ClearSendid clears the sendid edge to Send.
func (tu *TransportUpdate) ClearSendid() *TransportUpdate {
	tu.mutation.ClearSendid()
	return tu
}

// ClearReceiveid clears the receiveid edge to Receive.
func (tu *TransportUpdate) ClearReceiveid() *TransportUpdate {
	tu.mutation.ClearReceiveid()
	return tu
}

// ClearUser clears the user edge to User.
func (tu *TransportUpdate) ClearUser() *TransportUpdate {
	tu.mutation.ClearUser()
	return tu
}

// ClearAmbulance clears the ambulance edge to Ambulance.
func (tu *TransportUpdate) ClearAmbulance() *TransportUpdate {
	tu.mutation.ClearAmbulance()
	return tu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TransportUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransportUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransportUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransportUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TransportUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transport.Table,
			Columns: transport.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transport.FieldID,
			},
		},
	}
	if ps := tu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tu.mutation.SendidCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.SendidTable,
			Columns: []string{transport.SendidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: send.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SendidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.SendidTable,
			Columns: []string{transport.SendidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: send.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ReceiveidCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.ReceiveidTable,
			Columns: []string{transport.ReceiveidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: receive.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ReceiveidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.ReceiveidTable,
			Columns: []string{transport.ReceiveidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: receive.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.UserTable,
			Columns: []string{transport.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.UserTable,
			Columns: []string{transport.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.AmbulanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.AmbulanceTable,
			Columns: []string{transport.AmbulanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ambulance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AmbulanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.AmbulanceTable,
			Columns: []string{transport.AmbulanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ambulance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transport.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TransportUpdateOne is the builder for updating a single Transport entity.
type TransportUpdateOne struct {
	config
	hooks    []Hook
	mutation *TransportMutation
}

// SetSendidID sets the sendid edge to Send by id.
func (tuo *TransportUpdateOne) SetSendidID(id int) *TransportUpdateOne {
	tuo.mutation.SetSendidID(id)
	return tuo
}

// SetNillableSendidID sets the sendid edge to Send by id if the given value is not nil.
func (tuo *TransportUpdateOne) SetNillableSendidID(id *int) *TransportUpdateOne {
	if id != nil {
		tuo = tuo.SetSendidID(*id)
	}
	return tuo
}

// SetSendid sets the sendid edge to Send.
func (tuo *TransportUpdateOne) SetSendid(s *Send) *TransportUpdateOne {
	return tuo.SetSendidID(s.ID)
}

// SetReceiveidID sets the receiveid edge to Receive by id.
func (tuo *TransportUpdateOne) SetReceiveidID(id int) *TransportUpdateOne {
	tuo.mutation.SetReceiveidID(id)
	return tuo
}

// SetNillableReceiveidID sets the receiveid edge to Receive by id if the given value is not nil.
func (tuo *TransportUpdateOne) SetNillableReceiveidID(id *int) *TransportUpdateOne {
	if id != nil {
		tuo = tuo.SetReceiveidID(*id)
	}
	return tuo
}

// SetReceiveid sets the receiveid edge to Receive.
func (tuo *TransportUpdateOne) SetReceiveid(r *Receive) *TransportUpdateOne {
	return tuo.SetReceiveidID(r.ID)
}

// SetUserID sets the user edge to User by id.
func (tuo *TransportUpdateOne) SetUserID(id int) *TransportUpdateOne {
	tuo.mutation.SetUserID(id)
	return tuo
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (tuo *TransportUpdateOne) SetNillableUserID(id *int) *TransportUpdateOne {
	if id != nil {
		tuo = tuo.SetUserID(*id)
	}
	return tuo
}

// SetUser sets the user edge to User.
func (tuo *TransportUpdateOne) SetUser(u *User) *TransportUpdateOne {
	return tuo.SetUserID(u.ID)
}

// SetAmbulanceID sets the ambulance edge to Ambulance by id.
func (tuo *TransportUpdateOne) SetAmbulanceID(id int) *TransportUpdateOne {
	tuo.mutation.SetAmbulanceID(id)
	return tuo
}

// SetNillableAmbulanceID sets the ambulance edge to Ambulance by id if the given value is not nil.
func (tuo *TransportUpdateOne) SetNillableAmbulanceID(id *int) *TransportUpdateOne {
	if id != nil {
		tuo = tuo.SetAmbulanceID(*id)
	}
	return tuo
}

// SetAmbulance sets the ambulance edge to Ambulance.
func (tuo *TransportUpdateOne) SetAmbulance(a *Ambulance) *TransportUpdateOne {
	return tuo.SetAmbulanceID(a.ID)
}

// Mutation returns the TransportMutation object of the builder.
func (tuo *TransportUpdateOne) Mutation() *TransportMutation {
	return tuo.mutation
}

// ClearSendid clears the sendid edge to Send.
func (tuo *TransportUpdateOne) ClearSendid() *TransportUpdateOne {
	tuo.mutation.ClearSendid()
	return tuo
}

// ClearReceiveid clears the receiveid edge to Receive.
func (tuo *TransportUpdateOne) ClearReceiveid() *TransportUpdateOne {
	tuo.mutation.ClearReceiveid()
	return tuo
}

// ClearUser clears the user edge to User.
func (tuo *TransportUpdateOne) ClearUser() *TransportUpdateOne {
	tuo.mutation.ClearUser()
	return tuo
}

// ClearAmbulance clears the ambulance edge to Ambulance.
func (tuo *TransportUpdateOne) ClearAmbulance() *TransportUpdateOne {
	tuo.mutation.ClearAmbulance()
	return tuo
}

// Save executes the query and returns the updated entity.
func (tuo *TransportUpdateOne) Save(ctx context.Context) (*Transport, error) {

	var (
		err  error
		node *Transport
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransportUpdateOne) SaveX(ctx context.Context) *Transport {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TransportUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransportUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TransportUpdateOne) sqlSave(ctx context.Context) (t *Transport, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transport.Table,
			Columns: transport.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transport.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Transport.ID for update")}
	}
	_spec.Node.ID.Value = id
	if tuo.mutation.SendidCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.SendidTable,
			Columns: []string{transport.SendidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: send.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SendidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.SendidTable,
			Columns: []string{transport.SendidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: send.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ReceiveidCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.ReceiveidTable,
			Columns: []string{transport.ReceiveidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: receive.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ReceiveidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.ReceiveidTable,
			Columns: []string{transport.ReceiveidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: receive.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.UserTable,
			Columns: []string{transport.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.UserTable,
			Columns: []string{transport.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.AmbulanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.AmbulanceTable,
			Columns: []string{transport.AmbulanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ambulance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AmbulanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.AmbulanceTable,
			Columns: []string{transport.AmbulanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ambulance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	t = &Transport{config: tuo.config}
	_spec.Assign = t.assignValues
	_spec.ScanValues = t.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transport.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return t, nil
}
