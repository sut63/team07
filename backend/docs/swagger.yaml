basePath: /api/v1
definitions:
  controllers.Ambulance:
    properties:
      carbrandID:
        type: integer
      carstatusID:
        type: integer
      datetime:
        type: string
      insuranceID:
        type: integer
      registration:
        type: string
      userID:
        type: integer
    type: object
  controllers.CarCheckInOut:
    properties:
      ambulance:
        type: integer
      checkin:
        type: string
      checkout:
        type: string
      name:
        type: integer
      note:
        type: string
      purpose:
        type: integer
    type: object
  controllers.CarInspection:
    properties:
      ambulanceID:
        type: integer
      datetime:
        type: string
      inspectionResultID:
        type: integer
      note:
        type: string
      userID:
        type: integer
    type: object
  controllers.CarRepairrecord:
    properties:
      carInspectionID:
        type: integer
      datetime:
        type: string
      repairingID:
        type: integer
      userID:
        type: integer
    type: object
  controllers.Carservice:
    properties:
      age:
        type: integer
      customer:
        type: string
      datetime:
        type: string
      distanceID:
        type: integer
      information:
        type: string
      location:
        type: string
      urgentID:
        type: integer
      userID:
        type: integer
    type: object
  controllers.Transport:
    properties:
      ambulanceID:
        type: integer
      receiveID:
        type: integer
      sendID:
        type: integer
      userID:
        type: integer
    type: object
  ent.Ambulance:
    properties:
      carregistration:
        description: Carregistration holds the value of the "carregistration" field.
        type: string
      edges:
        $ref: '#/definitions/ent.AmbulanceEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the AmbulanceQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      registerat:
        description: Registerat holds the value of the "registerat" field.
        type: string
    type: object
  ent.AmbulanceEdges:
    properties:
      ambulance:
        description: Ambulance holds the value of the ambulance edge.
        items:
          $ref: '#/definitions/ent.Transport'
        type: array
      carcheckinout:
        description: Carcheckinout holds the value of the carcheckinout edge.
        items:
          $ref: '#/definitions/ent.CarCheckInOut'
        type: array
      carinspections:
        description: Carinspections holds the value of the carinspections edge.
        items:
          $ref: '#/definitions/ent.CarInspection'
        type: array
      hasbrand:
        $ref: '#/definitions/ent.Carbrand'
        description: Hasbrand holds the value of the hasbrand edge.
        type: object
      hasinsurance:
        $ref: '#/definitions/ent.Insurance'
        description: Hasinsurance holds the value of the hasinsurance edge.
        type: object
      hasstatus:
        $ref: '#/definitions/ent.InspectionResult'
        description: Hasstatus holds the value of the hasstatus edge.
        type: object
      hasuser:
        $ref: '#/definitions/ent.User'
        description: Hasuser holds the value of the hasuser edge.
        type: object
    type: object
  ent.CarCheckInOut:
    properties:
      checkIn:
        description: CheckIn holds the value of the "checkIn" field.
        type: string
      checkOut:
        description: CheckOut holds the value of the "checkOut" field.
        type: string
      edges:
        $ref: '#/definitions/ent.CarCheckInOutEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the CarCheckInOutQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      note:
        description: Note holds the value of the "note" field.
        type: string
    type: object
  ent.CarCheckInOutEdges:
    properties:
      ambulance:
        $ref: '#/definitions/ent.Ambulance'
        description: Ambulance holds the value of the ambulance edge.
        type: object
      name:
        $ref: '#/definitions/ent.User'
        description: Name holds the value of the name edge.
        type: object
      purpose:
        $ref: '#/definitions/ent.Purpose'
        description: Purpose holds the value of the purpose edge.
        type: object
    type: object
  ent.CarInspection:
    properties:
      datetime:
        description: Datetime holds the value of the "datetime" field.
        type: string
      edges:
        $ref: '#/definitions/ent.CarInspectionEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the CarInspectionQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      note:
        description: Note holds the value of the "note" field.
        type: string
    type: object
  ent.CarInspectionEdges:
    properties:
      ambulance:
        $ref: '#/definitions/ent.Ambulance'
        description: Ambulance holds the value of the ambulance edge.
        type: object
      carrepairrecords:
        description: Carrepairrecords holds the value of the carrepairrecords edge.
        items:
          $ref: '#/definitions/ent.CarRepairrecord'
        type: array
      inspectionresult:
        $ref: '#/definitions/ent.InspectionResult'
        description: Inspectionresult holds the value of the inspectionresult edge.
        type: object
      user:
        $ref: '#/definitions/ent.User'
        description: User holds the value of the user edge.
        type: object
    type: object
  ent.CarRepairrecord:
    properties:
      datetime:
        description: Datetime holds the value of the "datetime" field.
        type: string
      edges:
        $ref: '#/definitions/ent.CarRepairrecordEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the CarRepairrecordQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.CarRepairrecordEdges:
    properties:
      carinspection:
        $ref: '#/definitions/ent.CarInspection'
        description: Carinspection holds the value of the carinspection edge.
        type: object
      keeper:
        $ref: '#/definitions/ent.Repairing'
        description: Keeper holds the value of the keeper edge.
        type: object
      user:
        $ref: '#/definitions/ent.User'
        description: User holds the value of the user edge.
        type: object
    type: object
  ent.Carbrand:
    properties:
      brand:
        description: Brand holds the value of the "brand" field.
        type: string
      edges:
        $ref: '#/definitions/ent.CarbrandEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the CarbrandQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.CarbrandEdges:
    properties:
      brandof:
        description: Brandof holds the value of the brandof edge.
        items:
          $ref: '#/definitions/ent.Ambulance'
        type: array
    type: object
  ent.Carservice:
    properties:
      Datetime:
        description: Datetime holds the value of the "Datetime" field.
        type: string
      age:
        description: Age holds the value of the "age" field.
        type: integer
      customer:
        description: Customer holds the value of the "customer" field.
        type: string
      edges:
        $ref: '#/definitions/ent.CarserviceEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the CarserviceQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      information:
        description: Information holds the value of the "information" field.
        type: string
      location:
        description: Location holds the value of the "location" field.
        type: string
    type: object
  ent.CarserviceEdges:
    properties:
      disid:
        $ref: '#/definitions/ent.Distance'
        description: Disid holds the value of the disid edge.
        type: object
      urgentid:
        $ref: '#/definitions/ent.Urgent'
        description: Urgentid holds the value of the urgentid edge.
        type: object
      userid:
        $ref: '#/definitions/ent.User'
        description: Userid holds the value of the userid edge.
        type: object
    type: object
  ent.Distance:
    properties:
      Distance:
        description: Distance holds the value of the "Distance" field.
        type: string
      edges:
        $ref: '#/definitions/ent.DistanceEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the DistanceQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.DistanceEdges:
    properties:
      disid:
        description: Disid holds the value of the disid edge.
        items:
          $ref: '#/definitions/ent.Carservice'
        type: array
    type: object
  ent.InspectionResult:
    properties:
      edges:
        $ref: '#/definitions/ent.InspectionResultEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the InspectionResultQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      result_name:
        description: ResultName holds the value of the "result_name" field.
        type: string
    type: object
  ent.InspectionResultEdges:
    properties:
      carinspections:
        description: Carinspections holds the value of the carinspections edge.
        items:
          $ref: '#/definitions/ent.CarInspection'
        type: array
      jobposition:
        $ref: '#/definitions/ent.JobPosition'
        description: Jobposition holds the value of the jobposition edge.
        type: object
      statusof:
        description: Statusof holds the value of the statusof edge.
        items:
          $ref: '#/definitions/ent.Ambulance'
        type: array
    type: object
  ent.Insurance:
    properties:
      company:
        description: Company holds the value of the "company" field.
        type: string
      edges:
        $ref: '#/definitions/ent.InsuranceEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the InsuranceQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.InsuranceEdges:
    properties:
      insuranceof:
        description: Insuranceof holds the value of the insuranceof edge.
        items:
          $ref: '#/definitions/ent.Ambulance'
        type: array
    type: object
  ent.JobPosition:
    properties:
      edges:
        $ref: '#/definitions/ent.JobPositionEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the JobPositionQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      position_name:
        description: PositionName holds the value of the "position_name" field.
        type: string
    type: object
  ent.JobPositionEdges:
    properties:
      inspectionresults:
        description: Inspectionresults holds the value of the inspectionresults edge.
        items:
          $ref: '#/definitions/ent.InspectionResult'
        type: array
      users:
        description: Users holds the value of the users edge.
        items:
          $ref: '#/definitions/ent.User'
        type: array
    type: object
  ent.Purpose:
    properties:
      edges:
        $ref: '#/definitions/ent.PurposeEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the PurposeQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      objective:
        description: Objective holds the value of the "objective" field.
        type: string
    type: object
  ent.PurposeEdges:
    properties:
      carcheckinout:
        description: Carcheckinout holds the value of the carcheckinout edge.
        items:
          $ref: '#/definitions/ent.CarCheckInOut'
        type: array
    type: object
  ent.Receive:
    properties:
      edges:
        $ref: '#/definitions/ent.ReceiveEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the ReceiveQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      receivename:
        description: Receivename holds the value of the "receivename" field.
        type: string
    type: object
  ent.ReceiveEdges:
    properties:
      receiveid:
        description: Receiveid holds the value of the receiveid edge.
        items:
          $ref: '#/definitions/ent.Transport'
        type: array
    type: object
  ent.Repairing:
    properties:
      edges:
        $ref: '#/definitions/ent.RepairingEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the RepairingQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      repairpart:
        description: Repairpart holds the value of the "repairpart" field.
        type: string
    type: object
  ent.RepairingEdges:
    properties:
      repairs:
        description: Repairs holds the value of the repairs edge.
        items:
          $ref: '#/definitions/ent.CarRepairrecord'
        type: array
    type: object
  ent.Send:
    properties:
      edges:
        $ref: '#/definitions/ent.SendEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the SendQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      sendname:
        description: Sendname holds the value of the "sendname" field.
        type: string
    type: object
  ent.SendEdges:
    properties:
      sendid:
        description: Sendid holds the value of the sendid edge.
        items:
          $ref: '#/definitions/ent.Transport'
        type: array
    type: object
  ent.Transport:
    properties:
      edges:
        $ref: '#/definitions/ent.TransportEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the TransportQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.TransportEdges:
    properties:
      ambulance:
        $ref: '#/definitions/ent.Ambulance'
        description: Ambulance holds the value of the ambulance edge.
        type: object
      receiveid:
        $ref: '#/definitions/ent.Receive'
        description: Receiveid holds the value of the receiveid edge.
        type: object
      sendid:
        $ref: '#/definitions/ent.Send'
        description: Sendid holds the value of the sendid edge.
        type: object
      user:
        $ref: '#/definitions/ent.User'
        description: User holds the value of the user edge.
        type: object
    type: object
  ent.Urgent:
    properties:
      edges:
        $ref: '#/definitions/ent.UrgentEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the UrgentQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
      urgent:
        description: Urgent holds the value of the "urgent" field.
        type: string
    type: object
  ent.UrgentEdges:
    properties:
      urgentid:
        description: Urgentid holds the value of the urgentid edge.
        items:
          $ref: '#/definitions/ent.Carservice'
        type: array
    type: object
  ent.User:
    properties:
      edges:
        $ref: '#/definitions/ent.UserEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the UserQuery when eager-loading is set.
        type: object
      email:
        description: Email holds the value of the "email" field.
        type: string
      id:
        description: ID of the ent.
        type: integer
      name:
        description: Name holds the value of the "name" field.
        type: string
      password:
        description: Password holds the value of the "password" field.
        type: string
    type: object
  ent.UserEdges:
    properties:
      carcheckinout:
        description: Carcheckinout holds the value of the carcheckinout edge.
        items:
          $ref: '#/definitions/ent.CarCheckInOut'
        type: array
      carinspections:
        description: Carinspections holds the value of the carinspections edge.
        items:
          $ref: '#/definitions/ent.CarInspection'
        type: array
      carrepairrecords:
        description: Carrepairrecords holds the value of the carrepairrecords edge.
        items:
          $ref: '#/definitions/ent.CarRepairrecord'
        type: array
      jobposition:
        $ref: '#/definitions/ent.JobPosition'
        description: Jobposition holds the value of the jobposition edge.
        type: object
      user:
        description: User holds the value of the user edge.
        items:
          $ref: '#/definitions/ent.Transport'
        type: array
      userid:
        description: Userid holds the value of the userid edge.
        items:
          $ref: '#/definitions/ent.Carservice'
        type: array
      userof:
        description: Userof holds the value of the userof edge.
        items:
          $ref: '#/definitions/ent.Ambulance'
        type: array
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API
  version: "1.0"
paths:
  /ambulances:
    get:
      description: list ambulance entities
      operationId: list-ambulance
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Ambulance'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List ambulance entities
    post:
      consumes:
      - application/json
      description: Create ambulance
      operationId: create-ambulance
      parameters:
      - description: Ambulance entity
        in: body
        name: ambulance
        required: true
        schema:
          $ref: '#/definitions/controllers.Ambulance'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Ambulance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create ambulance
  /ambulances/{id}:
    delete:
      description: get Ambulance by ID
      operationId: delete-Ambulance
      parameters:
      - description: Ambulance ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a Ambulance entity by ID
    get:
      description: get ambulance by ID
      operationId: get-ambulance
      parameters:
      - description: Ambulance ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Ambulance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a ambulance entity by ID
  /carbrands:
    get:
      description: list carbrand entities
      operationId: list-carbrand
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Carbrand'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List carbrand entities
  /carbrands/{id}:
    delete:
      description: get carbrand by ID
      operationId: delete-carbrand
      parameters:
      - description: Carbrand ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a carbrand entity by ID
    get:
      description: get carbrand by ID
      operationId: get-carbrand
      parameters:
      - description: Carbrand ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Carbrand'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a carbrand entity by ID
  /carcheckinouts:
    get:
      description: list carcheckinout entities
      operationId: list-carcheckinout
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.CarCheckInOut'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List carcheckinout entities
    post:
      consumes:
      - application/json
      description: Create carcheckinout
      operationId: create-carcheckinout
      parameters:
      - description: CarCheckInOut entity
        in: body
        name: carcheckinout
        required: true
        schema:
          $ref: '#/definitions/controllers.CarCheckInOut'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.CarCheckInOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create carcheckinout
  /carcheckinouts/{id}:
    delete:
      description: get carcheckinout by ID
      operationId: delete-carcheckinout
      parameters:
      - description: CarCheckInOut ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a carcheckinout entity by ID
    get:
      description: get carcheckinout by ID
      operationId: get-carcheckinout
      parameters:
      - description: CarCheckInOut ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.CarCheckInOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a carcheckinout entity by ID
    put:
      consumes:
      - application/json
      description: update carcheckinout by ID
      operationId: update-carcheckinout
      parameters:
      - description: CarCheckInOut ID
        in: path
        name: id
        required: true
        type: integer
      - description: CarCheckInOut entity
        in: body
        name: carcheckinout
        required: true
        schema:
          $ref: '#/definitions/ent.CarCheckInOut'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.CarCheckInOut'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a carcheckinout entity by ID
  /carinspections:
    get:
      description: list carinspection entities
      operationId: list-carinspection
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.CarInspection'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List carinspection entities
    post:
      consumes:
      - application/json
      description: Create carinspection
      operationId: create-carinspection
      parameters:
      - description: CarInspection entity
        in: body
        name: carinspection
        required: true
        schema:
          $ref: '#/definitions/controllers.CarInspection'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.CarInspection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create carinspection
  /carinspections/{id}:
    delete:
      description: get carinspection by ID
      operationId: delete-carinspection
      parameters:
      - description: CarInspection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a carinspection entity by ID
    get:
      description: get carinspection by ID
      operationId: get-carinspection
      parameters:
      - description: CarInspection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.CarInspection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a carinspection entity by ID
  /carrepairrecords:
    get:
      description: list carrepairrecord entities
      operationId: list-carrepairrecord
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.CarRepairrecord'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List carrepairrecord entities
    post:
      consumes:
      - application/json
      description: Create carrepairrecord
      operationId: create-carrepairrecord
      parameters:
      - description: CarRepairrecord entity
        in: body
        name: carrepairrecord
        required: true
        schema:
          $ref: '#/definitions/controllers.CarRepairrecord'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.CarRepairrecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create carrepairrecord
  /carrepairrecords/{id}:
    delete:
      description: get carrepairrecord by ID
      operationId: delete-carrepairrecord
      parameters:
      - description: CarRepairrecord ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a carrepairrecord entity by ID
    get:
      description: get carrepairrecord by ID
      operationId: get-carrepairrecord
      parameters:
      - description: CarRepairrecord ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.CarRepairrecord'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a carrepairrecord entity by ID
  /carservices:
    get:
      description: list carservice entities
      operationId: list-carservice
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Carservice'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List carservice entities
    post:
      consumes:
      - application/json
      description: Create carservice
      operationId: create-carservice
      parameters:
      - description: Carservice entity
        in: body
        name: carservice
        required: true
        schema:
          $ref: '#/definitions/controllers.Carservice'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Carservice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create carservice
  /carservices/{id}:
    delete:
      description: get Carservice by ID
      operationId: delete-Carservice
      parameters:
      - description: Carservice ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a Carservice entity by ID
    get:
      description: get carservice by ID
      operationId: get-carservice
      parameters:
      - description: Carservice ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Carservice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a carservice entity by ID
  /distances:
    get:
      description: list distance entities
      operationId: list-distance
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Distance'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List distance entities
  /distances/{id}:
    get:
      description: get distance by ID
      operationId: get-distance
      parameters:
      - description: Distance ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Distance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a distance entity by ID
  /inspectionresults:
    get:
      description: list inspectionresult entities
      operationId: list-inspectionresult
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.InspectionResult'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List inspectionresult entities
  /inspectionresults/{id}:
    delete:
      description: get inspectionresult by ID
      operationId: delete-inspectionresult
      parameters:
      - description: InspectionResult ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a inspectionresult entity by ID
    get:
      description: get inspectionresult by ID
      operationId: get-inspectionresult
      parameters:
      - description: InspectionResult ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.InspectionResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a inspectionresult entity by ID
  /insurances:
    get:
      description: list insurance entities
      operationId: list-insurance
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Insurance'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List insurance entities
  /insurances/{id}:
    delete:
      description: get insurance by ID
      operationId: delete-insurance
      parameters:
      - description: Insurance ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a insurance entity by ID
    get:
      description: get insurance by ID
      operationId: get-insurance
      parameters:
      - description: Insurance ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Insurance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a insurance entity by ID
  /purposes:
    get:
      description: list purpose entities
      operationId: list-purpose
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Purpose'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List purpose entities
  /purposes/{id}:
    delete:
      description: get purpose by ID
      operationId: delete-purpose
      parameters:
      - description: Purpose ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a purpose entity by ID
    get:
      description: get purpose by ID
      operationId: get-purpose
      parameters:
      - description: Purpose ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Purpose'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a purpose entity by ID
  /receives:
    get:
      description: list receive entities
      operationId: list-receive
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Receive'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List receive entities
  /receives/{id}:
    delete:
      description: get receive by ID
      operationId: delete-receive
      parameters:
      - description: Receive ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a receive entity by ID
    get:
      description: get receive by ID
      operationId: get-receive
      parameters:
      - description: Receive ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Receive'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a receive entity by ID
  /repairings:
    get:
      description: list repairing entities
      operationId: list-repairing
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Repairing'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List Repairing entities
  /repairings/{id}:
    get:
      description: get repairing by ID
      operationId: get-repairing
      parameters:
      - description: Repairing ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Repairing'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a repairing entity by ID
  /sends:
    get:
      description: list send entities
      operationId: list-send
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Send'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List send entities
  /sends/{id}:
    delete:
      description: get send by ID
      operationId: delete-send
      parameters:
      - description: Send ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a send entity by ID
    get:
      description: get send by ID
      operationId: get-send
      parameters:
      - description: Send ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Send'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a send entity by ID
  /transports:
    get:
      description: list transport entities
      operationId: list-transport
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Transport'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List transport entities
    post:
      consumes:
      - application/json
      description: Create transport
      operationId: create-transport
      parameters:
      - description: Transport entity
        in: body
        name: transport
        required: true
        schema:
          $ref: '#/definitions/controllers.Transport'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Transport'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create transport
  /transports/{id}:
    delete:
      description: get transport by ID
      operationId: delete-transport
      parameters:
      - description: Transport ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a transport entity by ID
    get:
      description: get transport by ID
      operationId: get-transport
      parameters:
      - description: Transport ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Transport'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a transport entity by ID
  /urgents:
    get:
      description: list urgent entities
      operationId: list-urgent
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Urgent'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List urgent entities
  /users:
    get:
      description: list user entities
      operationId: list-user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List user entities
  /users/{id}:
    delete:
      description: get user by ID
      operationId: delete-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a user entity by ID
    get:
      description: get user by ID
      operationId: get-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a user entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    authorizationUrl: ""
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    authorizationUrl: ""
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
