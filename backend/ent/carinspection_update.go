// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team07/app/ent/carinspection"
	"github.com/team07/app/ent/predicate"
)

// CarInspectionUpdate is the builder for updating CarInspection entities.
type CarInspectionUpdate struct {
	config
	hooks      []Hook
	mutation   *CarInspectionMutation
	predicates []predicate.CarInspection
}

// Where adds a new predicate for the builder.
func (ciu *CarInspectionUpdate) Where(ps ...predicate.CarInspection) *CarInspectionUpdate {
	ciu.predicates = append(ciu.predicates, ps...)
	return ciu
}

// Mutation returns the CarInspectionMutation object of the builder.
func (ciu *CarInspectionUpdate) Mutation() *CarInspectionMutation {
	return ciu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ciu *CarInspectionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ciu.hooks) == 0 {
		affected, err = ciu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CarInspectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ciu.mutation = mutation
			affected, err = ciu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ciu.hooks) - 1; i >= 0; i-- {
			mut = ciu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ciu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciu *CarInspectionUpdate) SaveX(ctx context.Context) int {
	affected, err := ciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ciu *CarInspectionUpdate) Exec(ctx context.Context) error {
	_, err := ciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciu *CarInspectionUpdate) ExecX(ctx context.Context) {
	if err := ciu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ciu *CarInspectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   carinspection.Table,
			Columns: carinspection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: carinspection.FieldID,
			},
		},
	}
	if ps := ciu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carinspection.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CarInspectionUpdateOne is the builder for updating a single CarInspection entity.
type CarInspectionUpdateOne struct {
	config
	hooks    []Hook
	mutation *CarInspectionMutation
}

// Mutation returns the CarInspectionMutation object of the builder.
func (ciuo *CarInspectionUpdateOne) Mutation() *CarInspectionMutation {
	return ciuo.mutation
}

// Save executes the query and returns the updated entity.
func (ciuo *CarInspectionUpdateOne) Save(ctx context.Context) (*CarInspection, error) {
	var (
		err  error
		node *CarInspection
	)
	if len(ciuo.hooks) == 0 {
		node, err = ciuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CarInspectionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ciuo.mutation = mutation
			node, err = ciuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ciuo.hooks) - 1; i >= 0; i-- {
			mut = ciuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ciuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ciuo *CarInspectionUpdateOne) SaveX(ctx context.Context) *CarInspection {
	ci, err := ciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ci
}

// Exec executes the query on the entity.
func (ciuo *CarInspectionUpdateOne) Exec(ctx context.Context) error {
	_, err := ciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ciuo *CarInspectionUpdateOne) ExecX(ctx context.Context) {
	if err := ciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ciuo *CarInspectionUpdateOne) sqlSave(ctx context.Context) (ci *CarInspection, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   carinspection.Table,
			Columns: carinspection.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: carinspection.FieldID,
			},
		},
	}
	id, ok := ciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CarInspection.ID for update")}
	}
	_spec.Node.ID.Value = id
	ci = &CarInspection{config: ciuo.config}
	_spec.Assign = ci.assignValues
	_spec.ScanValues = ci.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{carinspection.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ci, nil
}
