// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team07/app/ent/ambulance"
	"github.com/team07/app/ent/receive"
	"github.com/team07/app/ent/send"
	"github.com/team07/app/ent/transport"
	"github.com/team07/app/ent/user"
)

// TransportCreate is the builder for creating a Transport entity.
type TransportCreate struct {
	config
	mutation *TransportMutation
	hooks    []Hook
}

// SetSendidID sets the sendid edge to Send by id.
func (tc *TransportCreate) SetSendidID(id int) *TransportCreate {
	tc.mutation.SetSendidID(id)
	return tc
}

// SetNillableSendidID sets the sendid edge to Send by id if the given value is not nil.
func (tc *TransportCreate) SetNillableSendidID(id *int) *TransportCreate {
	if id != nil {
		tc = tc.SetSendidID(*id)
	}
	return tc
}

// SetSendid sets the sendid edge to Send.
func (tc *TransportCreate) SetSendid(s *Send) *TransportCreate {
	return tc.SetSendidID(s.ID)
}

// SetReceiveidID sets the receiveid edge to Receive by id.
func (tc *TransportCreate) SetReceiveidID(id int) *TransportCreate {
	tc.mutation.SetReceiveidID(id)
	return tc
}

// SetNillableReceiveidID sets the receiveid edge to Receive by id if the given value is not nil.
func (tc *TransportCreate) SetNillableReceiveidID(id *int) *TransportCreate {
	if id != nil {
		tc = tc.SetReceiveidID(*id)
	}
	return tc
}

// SetReceiveid sets the receiveid edge to Receive.
func (tc *TransportCreate) SetReceiveid(r *Receive) *TransportCreate {
	return tc.SetReceiveidID(r.ID)
}

// SetUserID sets the user edge to User by id.
func (tc *TransportCreate) SetUserID(id int) *TransportCreate {
	tc.mutation.SetUserID(id)
	return tc
}

// SetNillableUserID sets the user edge to User by id if the given value is not nil.
func (tc *TransportCreate) SetNillableUserID(id *int) *TransportCreate {
	if id != nil {
		tc = tc.SetUserID(*id)
	}
	return tc
}

// SetUser sets the user edge to User.
func (tc *TransportCreate) SetUser(u *User) *TransportCreate {
	return tc.SetUserID(u.ID)
}

// SetAmbulanceID sets the ambulance edge to Ambulance by id.
func (tc *TransportCreate) SetAmbulanceID(id int) *TransportCreate {
	tc.mutation.SetAmbulanceID(id)
	return tc
}

// SetNillableAmbulanceID sets the ambulance edge to Ambulance by id if the given value is not nil.
func (tc *TransportCreate) SetNillableAmbulanceID(id *int) *TransportCreate {
	if id != nil {
		tc = tc.SetAmbulanceID(*id)
	}
	return tc
}

// SetAmbulance sets the ambulance edge to Ambulance.
func (tc *TransportCreate) SetAmbulance(a *Ambulance) *TransportCreate {
	return tc.SetAmbulanceID(a.ID)
}

// Mutation returns the TransportMutation object of the builder.
func (tc *TransportCreate) Mutation() *TransportMutation {
	return tc.mutation
}

// Save creates the Transport in the database.
func (tc *TransportCreate) Save(ctx context.Context) (*Transport, error) {
	var (
		err  error
		node *Transport
	)
	if len(tc.hooks) == 0 {
		node, err = tc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransportMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tc.mutation = mutation
			node, err = tc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tc.hooks) - 1; i >= 0; i-- {
			mut = tc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TransportCreate) SaveX(ctx context.Context) *Transport {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (tc *TransportCreate) sqlSave(ctx context.Context) (*Transport, error) {
	t, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	t.ID = int(id)
	return t, nil
}

func (tc *TransportCreate) createSpec() (*Transport, *sqlgraph.CreateSpec) {
	var (
		t     = &Transport{config: tc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: transport.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: transport.FieldID,
			},
		}
	)
	if nodes := tc.mutation.SendidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.SendidTable,
			Columns: []string{transport.SendidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: send.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ReceiveidIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.ReceiveidTable,
			Columns: []string{transport.ReceiveidColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: receive.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.UserTable,
			Columns: []string{transport.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.AmbulanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transport.AmbulanceTable,
			Columns: []string{transport.AmbulanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ambulance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return t, _spec
}
